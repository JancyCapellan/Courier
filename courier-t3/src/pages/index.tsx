import type { NextPage } from 'next'
import Head from 'next/head'
import { trpc } from '../utils/trpc'
import { useState } from 'react'
import { signIn, signOut, useSession } from 'next-auth/react'
import Link from 'next/link'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from '../components/Formik/FormikControl'
import { useRouter } from 'next/router'

type TechnologyCardProps = {
  name: string
  description: string
  documentation: string
}

const HomeT3: NextPage = () => {
  const hello = trpc.useQuery(['example.hello', { text: 'from tRPC' }])

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='container mx-auto flex flex-col items-center justify-center min-h-screen p-4'>
        <h1 className='text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700'>
          Create <span className='text-purple-300'>T3</span> App
        </h1>
        <p className='text-2xl text-gray-700'>This stack uses:</p>
        <div className='grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3'>
          <TechnologyCard
            name='NextJS'
            description='The React framework for production'
            documentation='https://nextjs.org/'
          />
          <TechnologyCard
            name='TypeScript'
            description='Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale'
            documentation='https://www.typescriptlang.org/'
          />
          <TechnologyCard
            name='TailwindCSS'
            description='Rapidly build modern websites without ever leaving your HTML'
            documentation='https://tailwindcss.com/'
          />
          <TechnologyCard
            name='tRPC'
            description='End-to-end typesafe APIs made easy'
            documentation='https://trpc.io/'
          />
        </div>
        <div className='pt-6 text-2xl text-blue-500 flex justify-center items-center w-full'>
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
      </main>
    </>
  )
}

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className='flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105'>
      <h2 className='text-lg text-gray-700'>{name}</h2>
      <p className='text-sm text-gray-600'>{description}</p>
      <a
        className='mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2'
        href={documentation}
        target='_blank'
        rel='noreferrer'
      >
        Documentation
      </a>
    </section>
  )
}

const Home: NextPage = () => {
  // const [session, loadingUser] = useSession()
  const { data: session, status } = useSession()
  const [error, setError] = useState(false)

  const router = useRouter()
  // console.log('Registered?:', router.query?.didRegister)

  const signinRedirect = process.env.NEXT_PUBLIC_API_URL + 'account'

  return (
    <>
      <Head>
        <title>Courier's Dashboard</title>
        <meta name='description' content='webapp for shippers' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='home-container'>
        <h1> The Courier Dashboard</h1>
        {router.query?.didRegister}
        {error ? (
          <p>
            THERE WAS AN ERROR WHILE LOGGING. CHECK TO MAKE SURE THAT YOU ARE
            USING THE CORRECT USERNAME AND PASSWORD.
          </p>
        ) : (
          <></>
        )}
        {!!session ? (
          <>
            <p> Logged in as {session?.user?.name} </p>
            <button
              onClick={() =>
                signOut({ callbackUrl: process.env.NEXT_PUBLIC_URL_API })
              }
            >
              Sign out
            </button>
            <Link href='/account' passHref>
              <button>account</button>
            </Link>
          </>
        ) : (
          <Formik
            // initialValues={{ email: '', password: '', tenantKey: '' }}
            initialValues={{ email: '', password: '' }}
            validationSchema={Yup.object({
              email: Yup.string()
                .max(30, 'Must be 30 characters or less')
                .email('Invalid email address')
                .required('Please enter your email'),
              password: Yup.string().required('Please enter your password'),
              // tenantKey: Yup.string()
              //   .max(20, 'Must be 20 characters or less')
              //   .required('Please enter your organization name'),
            })}
            onSubmit={async (values, { setSubmitting }) => {
              const res = await signIn('login', {
                redirect: false,
                email: values.email,
                password: values.password,
                // tenantKey: values.tenantKey,
                callbackUrl: signinRedirect,
              })
              // console.log('res', res)
              if (res?.error) {
                setError(true)
              }
              if (res?.url) router.push(res.url)
              // console.log('error', error)
              setSubmitting(false)
            }}
          >
            {(formik) => {
              return (
                <>
                  <Form className='signin-form'>
                    <h2>Login</h2>
                    <FormikControl
                      control='input'
                      type='email'
                      label='Email'
                      name='email'
                      className='test'
                    />
                    <FormikControl
                      control='input'
                      type='password'
                      label='Password'
                      name='password'
                    />
                    <button type='submit' disabled={!formik.isValid}>
                      Submit
                    </button>
                    <Link href='/register' passHref>
                      <button>Dont have an account? Register here.</button>
                    </Link>
                  </Form>
                </>
              )
            }}
          </Formik>
        )}
      </div>
    </>
  )
}

export default Home
