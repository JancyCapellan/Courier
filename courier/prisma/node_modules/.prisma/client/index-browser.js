
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.3.0
 * Query Engine version: 33838b0f78f1fe9052cf9a00e9761c9dc097a63c
 */
Prisma.prismaVersion = {
  client: "3.3.0",
  engine: "33838b0f78f1fe9052cf9a00e9761c9dc097a63c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  password: 'password',
  email: 'email',
  role: 'role',
  company: 'company',
  branchName: 'branchName',
  lastSaleDate: 'lastSaleDate',
  lastLogin: 'lastLogin',
  preferredLanguage: 'preferredLanguage',
  licenseId: 'licenseId'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  address: 'address',
  address2: 'address2',
  address3: 'address3',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  cellphone: 'cellphone',
  telephone: 'telephone',
  default: 'default',
  recipient: 'recipient'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  timePlaced: 'timePlaced',
  recieverFirstName: 'recieverFirstName',
  recieverLastName: 'recieverLastName',
  totalItems: 'totalItems',
  totalPrice: 'totalPrice'
});

exports.Prisma.OrderAddressesScalarFieldEnum = makeEnum({
  id: 'id',
  orderId: 'orderId',
  shippedFrom: 'shippedFrom',
  shippedTo: 'shippedTo'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  orderId: 'orderId',
  productsId: 'productsId',
  quantity: 'quantity'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  price: 'price',
  productTypeId: 'productTypeId'
});

exports.Prisma.ProductTypeScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  address: 'address',
  Order: 'Order',
  OrderAddresses: 'OrderAddresses',
  OrderItem: 'OrderItem',
  product: 'product',
  productType: 'productType'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
