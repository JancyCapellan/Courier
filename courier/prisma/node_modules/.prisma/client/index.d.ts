
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  firstName: string
  lastName: string
  middleName: string | null
  password: string
  email: string
  role: string
  company: string | null
  branchName: string | null
  lastSaleDate: Date | null
  lastLogin: Date | null
  preferredLanguage: string
  licenseId: number | null
}

/**
 * Model address
 */

export type address = {
  id: number
  userId: number
  address: string
  address2: string | null
  address3: string | null
  city: string
  state: string
  postalCode: number
  country: string
  cellphone: string | null
  telephone: string | null
  default: boolean
  recipient: boolean
}

/**
 * Model Order
 */

export type Order = {
  id: number
  userId: number
  timePlaced: Date
  recieverFirstName: string
  recieverLastName: string
  totalItems: number
  totalPrice: number
  paymentType: string
  status: string
  location: string
  routeId: number | null
}

/**
 * Model OrderAddressDuo
 */

export type OrderAddressDuo = {
  id: number
  orderId: number
  address: string
  address2: string | null
  address3: string | null
  city: string
  state: string
  postalCode: number
  country: string
  cellphone: string | null
  telephone: string | null
  default: boolean
  recipient: boolean
}

/**
 * Model OrderItem
 */

export type OrderItem = {
  id: number
  orderId: number
  productsId: number
  amount: number
}

/**
 * Model product
 */

export type product = {
  id: number
  name: string
  price: number
  type: number
}

/**
 * Model productType
 */

export type productType = {
  id: number
  type: string
}

/**
 * Model DriverRoutes
 */

export type DriverRoutes = {
  id: number
  driverId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.addressDelegate<GlobalReject>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<GlobalReject>;

  /**
   * `prisma.orderAddressDuo`: Exposes CRUD operations for the **OrderAddressDuo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderAddressDuos
    * const orderAddressDuos = await prisma.orderAddressDuo.findMany()
    * ```
    */
  get orderAddressDuo(): Prisma.OrderAddressDuoDelegate<GlobalReject>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.productType`: Exposes CRUD operations for the **productType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTypes
    * const productTypes = await prisma.productType.findMany()
    * ```
    */
  get productType(): Prisma.productTypeDelegate<GlobalReject>;

  /**
   * `prisma.driverRoutes`: Exposes CRUD operations for the **DriverRoutes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DriverRoutes
    * const driverRoutes = await prisma.driverRoutes.findMany()
    * ```
    */
  get driverRoutes(): Prisma.DriverRoutesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.3.0
   * Query Engine version: 33838b0f78f1fe9052cf9a00e9761c9dc097a63c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    address: 'address',
    Order: 'Order',
    OrderAddressDuo: 'OrderAddressDuo',
    OrderItem: 'OrderItem',
    product: 'product',
    productType: 'productType',
    DriverRoutes: 'DriverRoutes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    addresses: number
    orders: number
    pastRoutes: number
  }

  export type UserCountOutputTypeSelect = {
    addresses?: boolean
    orders?: boolean
    pastRoutes?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type OrderCountOutputType
   */


  export type OrderCountOutputType = {
    items: number
    addresses: number
  }

  export type OrderCountOutputTypeSelect = {
    items?: boolean
    addresses?: boolean
  }

  export type OrderCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OrderCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OrderCountOutputType
    : S extends undefined
    ? never
    : S extends OrderCountOutputTypeArgs
    ?'include' extends U
    ? OrderCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OrderCountOutputType ?OrderCountOutputType [P]
  : 
     never
  } 
    : OrderCountOutputType
  : OrderCountOutputType




  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     * 
    **/
    select?: OrderCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    orderItem: number
  }

  export type ProductCountOutputTypeSelect = {
    orderItem?: boolean
  }

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends ProductCountOutputTypeArgs
    ?'include' extends U
    ? ProductCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProductCountOutputType ?ProductCountOutputType [P]
  : 
     never
  } 
    : ProductCountOutputType
  : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductTypeCountOutputType
   */


  export type ProductTypeCountOutputType = {
    product: number
  }

  export type ProductTypeCountOutputTypeSelect = {
    product?: boolean
  }

  export type ProductTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductTypeCountOutputType
    : S extends undefined
    ? never
    : S extends ProductTypeCountOutputTypeArgs
    ?'include' extends U
    ? ProductTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProductTypeCountOutputType ?ProductTypeCountOutputType [P]
  : 
     never
  } 
    : ProductTypeCountOutputType
  : ProductTypeCountOutputType




  // Custom InputTypes

  /**
   * ProductTypeCountOutputType without action
   */
  export type ProductTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductTypeCountOutputType
     * 
    **/
    select?: ProductTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type DriverRoutesCountOutputType
   */


  export type DriverRoutesCountOutputType = {
    orders: number
  }

  export type DriverRoutesCountOutputTypeSelect = {
    orders?: boolean
  }

  export type DriverRoutesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DriverRoutesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DriverRoutesCountOutputType
    : S extends undefined
    ? never
    : S extends DriverRoutesCountOutputTypeArgs
    ?'include' extends U
    ? DriverRoutesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DriverRoutesCountOutputType ?DriverRoutesCountOutputType [P]
  : 
     never
  } 
    : DriverRoutesCountOutputType
  : DriverRoutesCountOutputType




  // Custom InputTypes

  /**
   * DriverRoutesCountOutputType without action
   */
  export type DriverRoutesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutesCountOutputType
     * 
    **/
    select?: DriverRoutesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    licenseId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    licenseId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    password: string | null
    email: string | null
    role: string | null
    company: string | null
    branchName: string | null
    lastSaleDate: Date | null
    lastLogin: Date | null
    preferredLanguage: string | null
    licenseId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    middleName: string | null
    password: string | null
    email: string | null
    role: string | null
    company: string | null
    branchName: string | null
    lastSaleDate: Date | null
    lastLogin: Date | null
    preferredLanguage: string | null
    licenseId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    middleName: number
    password: number
    email: number
    role: number
    company: number
    branchName: number
    lastSaleDate: number
    lastLogin: number
    preferredLanguage: number
    licenseId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    licenseId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    licenseId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    password?: true
    email?: true
    role?: true
    company?: true
    branchName?: true
    lastSaleDate?: true
    lastLogin?: true
    preferredLanguage?: true
    licenseId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    password?: true
    email?: true
    role?: true
    company?: true
    branchName?: true
    lastSaleDate?: true
    lastLogin?: true
    preferredLanguage?: true
    licenseId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    middleName?: true
    password?: true
    email?: true
    role?: true
    company?: true
    branchName?: true
    lastSaleDate?: true
    lastLogin?: true
    preferredLanguage?: true
    licenseId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    middleName: string | null
    password: string
    email: string
    role: string
    company: string | null
    branchName: string | null
    lastSaleDate: Date | null
    lastLogin: Date | null
    preferredLanguage: string
    licenseId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    middleName?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
    company?: boolean
    branchName?: boolean
    lastSaleDate?: boolean
    lastLogin?: boolean
    preferredLanguage?: boolean
    licenseId?: boolean
    addresses?: boolean | addressFindManyArgs
    orders?: boolean | OrderFindManyArgs
    pastRoutes?: boolean | DriverRoutesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    addresses?: boolean | addressFindManyArgs
    orders?: boolean | OrderFindManyArgs
    pastRoutes?: boolean | DriverRoutesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'addresses'
        ? Array < addressGetPayload<S['include'][P]>>  :
        P extends 'orders'
        ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends 'pastRoutes'
        ? Array < DriverRoutesGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'addresses'
        ? Array < addressGetPayload<S['select'][P]>>  :
        P extends 'orders'
        ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends 'pastRoutes'
        ? Array < DriverRoutesGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    addresses<T extends addressFindManyArgs = {}>(args?: Subset<T, addressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<address>>, PrismaPromise<Array<addressGetPayload<T>>>>;

    orders<T extends OrderFindManyArgs = {}>(args?: Subset<T, OrderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>;

    pastRoutes<T extends DriverRoutesFindManyArgs = {}>(args?: Subset<T, DriverRoutesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DriverRoutes>>, PrismaPromise<Array<DriverRoutesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    postalCode: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    userId: number | null
    postalCode: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    userId: number | null
    address: string | null
    address2: string | null
    address3: string | null
    city: string | null
    state: string | null
    postalCode: number | null
    country: string | null
    cellphone: string | null
    telephone: string | null
    default: boolean | null
    recipient: boolean | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    address: string | null
    address2: string | null
    address3: string | null
    city: string | null
    state: string | null
    postalCode: number | null
    country: string | null
    cellphone: string | null
    telephone: string | null
    default: boolean | null
    recipient: boolean | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    userId: number
    address: number
    address2: number
    address3: number
    city: number
    state: number
    postalCode: number
    country: number
    cellphone: number
    telephone: number
    default: number
    recipient: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    userId?: true
    postalCode?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    userId?: true
    postalCode?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which address to aggregate.
     * 
    **/
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }


    
    
  export type AddressGroupByArgs = {
    where?: addressWhereInput
    orderBy?: Enumerable<addressOrderByWithAggregationInput>
    by: Array<AddressScalarFieldEnum>
    having?: addressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: number
    userId: number
    address: string
    address2: string | null
    address3: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone: string | null
    telephone: string | null
    default: boolean
    recipient: boolean
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Promise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AddressGroupByOutputType[P]> 
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      > 
    >


  export type addressSelect = {
    id?: boolean
    userId?: boolean
    address?: boolean
    address2?: boolean
    address3?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    country?: boolean
    cellphone?: boolean
    telephone?: boolean
    default?: boolean
    recipient?: boolean
    user?: boolean | UserArgs
  }

  export type addressInclude = {
    user?: boolean | UserArgs
  }

  export type addressGetPayload<
    S extends boolean | null | undefined | addressArgs,
    U = keyof S
      > = S extends true
        ? address
    : S extends undefined
    ? never
    : S extends addressArgs | addressFindManyArgs
    ?'include' extends U
    ? address  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof address ?address [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : address
  : address


  type addressCountArgs = Merge<
    Omit<addressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }
  >

  export interface addressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Address that matches the filter.
     * @param {addressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, addressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'address'> extends True ? CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>> : CheckSelect<T, Prisma__addressClient<address | null >, Prisma__addressClient<addressGetPayload<T> | null >>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, addressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'address'> extends True ? CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>> : CheckSelect<T, Prisma__addressClient<address | null >, Prisma__addressClient<addressGetPayload<T> | null >>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends addressFindManyArgs>(
      args?: SelectSubset<T, addressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<address>>, PrismaPromise<Array<addressGetPayload<T>>>>

    /**
     * Create a Address.
     * @param {addressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends addressCreateArgs>(
      args: SelectSubset<T, addressCreateArgs>
    ): CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>>

    /**
     * Create many Addresses.
     *     @param {addressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends addressCreateManyArgs>(
      args?: SelectSubset<T, addressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {addressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends addressDeleteArgs>(
      args: SelectSubset<T, addressDeleteArgs>
    ): CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>>

    /**
     * Update one Address.
     * @param {addressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addressUpdateArgs>(
      args: SelectSubset<T, addressUpdateArgs>
    ): CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>>

    /**
     * Delete zero or more Addresses.
     * @param {addressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addressDeleteManyArgs>(
      args?: SelectSubset<T, addressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addressUpdateManyArgs>(
      args: SelectSubset<T, addressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {addressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends addressUpsertArgs>(
      args: SelectSubset<T, addressUpsertArgs>
    ): CheckSelect<T, Prisma__addressClient<address>, Prisma__addressClient<addressGetPayload<T>>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends addressCountArgs>(
      args?: Subset<T, addressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__addressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * address findUnique
   */
  export type addressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * Throw an Error if a address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which address to fetch.
     * 
    **/
    where: addressWhereUniqueInput
  }


  /**
   * address findFirst
   */
  export type addressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * Throw an Error if a address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which address to fetch.
     * 
    **/
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     * 
    **/
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * address findMany
   */
  export type addressFindManyArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * Filter, which addresses to fetch.
     * 
    **/
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<addressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addresses.
     * 
    **/
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * address create
   */
  export type addressCreateArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * The data needed to create a address.
     * 
    **/
    data: XOR<addressCreateInput, addressUncheckedCreateInput>
  }


  /**
   * address createMany
   */
  export type addressCreateManyArgs = {
    data: Enumerable<addressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * address update
   */
  export type addressUpdateArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * The data needed to update a address.
     * 
    **/
    data: XOR<addressUpdateInput, addressUncheckedUpdateInput>
    /**
     * Choose, which address to update.
     * 
    **/
    where: addressWhereUniqueInput
  }


  /**
   * address updateMany
   */
  export type addressUpdateManyArgs = {
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyInput>
    where?: addressWhereInput
  }


  /**
   * address upsert
   */
  export type addressUpsertArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * The filter to search for the address to update in case it exists.
     * 
    **/
    where: addressWhereUniqueInput
    /**
     * In case the address found by the `where` argument doesn't exist, create a new address with this data.
     * 
    **/
    create: XOR<addressCreateInput, addressUncheckedCreateInput>
    /**
     * In case the address was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<addressUpdateInput, addressUncheckedUpdateInput>
  }


  /**
   * address delete
   */
  export type addressDeleteArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
    /**
     * Filter which address to delete.
     * 
    **/
    where: addressWhereUniqueInput
  }


  /**
   * address deleteMany
   */
  export type addressDeleteManyArgs = {
    where?: addressWhereInput
  }


  /**
   * address without action
   */
  export type addressArgs = {
    /**
     * Select specific fields to fetch from the address
     * 
    **/
    select?: addressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: addressInclude | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalItems: number | null
    totalPrice: number | null
    routeId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalItems: number | null
    totalPrice: number | null
    routeId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    timePlaced: Date | null
    recieverFirstName: string | null
    recieverLastName: string | null
    totalItems: number | null
    totalPrice: number | null
    paymentType: string | null
    status: string | null
    location: string | null
    routeId: number | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    timePlaced: Date | null
    recieverFirstName: string | null
    recieverLastName: string | null
    totalItems: number | null
    totalPrice: number | null
    paymentType: string | null
    status: string | null
    location: string | null
    routeId: number | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    timePlaced: number
    recieverFirstName: number
    recieverLastName: number
    totalItems: number
    totalPrice: number
    paymentType: number
    status: number
    location: number
    routeId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    totalItems?: true
    totalPrice?: true
    routeId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    totalItems?: true
    totalPrice?: true
    routeId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    timePlaced?: true
    recieverFirstName?: true
    recieverLastName?: true
    totalItems?: true
    totalPrice?: true
    paymentType?: true
    status?: true
    location?: true
    routeId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    timePlaced?: true
    recieverFirstName?: true
    recieverLastName?: true
    totalItems?: true
    totalPrice?: true
    paymentType?: true
    status?: true
    location?: true
    routeId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    timePlaced?: true
    recieverFirstName?: true
    recieverLastName?: true
    totalItems?: true
    totalPrice?: true
    paymentType?: true
    status?: true
    location?: true
    routeId?: true
    _all?: true
  }

  export type OrderAggregateArgs = {
    /**
     * Filter which Order to aggregate.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }


    
    
  export type OrderGroupByArgs = {
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithAggregationInput>
    by: Array<OrderScalarFieldEnum>
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }


  export type OrderGroupByOutputType = {
    id: number
    userId: number
    timePlaced: Date
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status: string
    location: string
    routeId: number | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Promise<
    Array<
      PickArray<OrderGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OrderGroupByOutputType[P]> 
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      > 
    >


  export type OrderSelect = {
    id?: boolean
    userId?: boolean
    timePlaced?: boolean
    recieverFirstName?: boolean
    recieverLastName?: boolean
    totalItems?: boolean
    totalPrice?: boolean
    paymentType?: boolean
    status?: boolean
    location?: boolean
    items?: boolean | OrderItemFindManyArgs
    addresses?: boolean | OrderAddressDuoFindManyArgs
    user?: boolean | UserArgs
    routeId?: boolean
    route?: boolean | DriverRoutesArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type OrderInclude = {
    items?: boolean | OrderItemFindManyArgs
    addresses?: boolean | OrderAddressDuoFindManyArgs
    user?: boolean | UserArgs
    route?: boolean | DriverRoutesArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type OrderGetPayload<
    S extends boolean | null | undefined | OrderArgs,
    U = keyof S
      > = S extends true
        ? Order
    : S extends undefined
    ? never
    : S extends OrderArgs | OrderFindManyArgs
    ?'include' extends U
    ? Order  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'items'
        ? Array < OrderItemGetPayload<S['include'][P]>>  :
        P extends 'addresses'
        ? Array < OrderAddressDuoGetPayload<S['include'][P]>>  :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'route'
        ? DriverRoutesGetPayload<S['include'][P]> | null :
        P extends '_count'
        ? OrderCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Order ?Order [P]
  : 
          P extends 'items'
        ? Array < OrderItemGetPayload<S['select'][P]>>  :
        P extends 'addresses'
        ? Array < OrderAddressDuoGetPayload<S['select'][P]>>  :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'route'
        ? DriverRoutesGetPayload<S['select'][P]> | null :
        P extends '_count'
        ? OrderCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Order
  : Order


  type OrderCountArgs = Merge<
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }
  >

  export interface OrderDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs>(
      args?: SelectSubset<T, OrderFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs>(
      args: SelectSubset<T, OrderCreateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs>(
      args?: SelectSubset<T, OrderCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs>(
      args: SelectSubset<T, OrderDeleteArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs>(
      args: SelectSubset<T, OrderUpdateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: SelectSubset<T, OrderDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs>(
      args: SelectSubset<T, OrderUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs>(
      args: SelectSubset<T, OrderUpsertArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    items<T extends OrderItemFindManyArgs = {}>(args?: Subset<T, OrderItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>;

    addresses<T extends OrderAddressDuoFindManyArgs = {}>(args?: Subset<T, OrderAddressDuoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderAddressDuo>>, PrismaPromise<Array<OrderAddressDuoGetPayload<T>>>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    route<T extends DriverRoutesArgs = {}>(args?: Subset<T, DriverRoutesArgs>): CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes | null >, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     * 
    **/
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Orders to fetch.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The data needed to create a Order.
     * 
    **/
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs = {
    data: Enumerable<OrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The data needed to update a Order.
     * 
    **/
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs = {
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The filter to search for the Order to update in case it exists.
     * 
    **/
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     * 
    **/
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Filter which Order to delete.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs = {
    where?: OrderWhereInput
  }


  /**
   * Order without action
   */
  export type OrderArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
  }



  /**
   * Model OrderAddressDuo
   */


  export type AggregateOrderAddressDuo = {
    _count: OrderAddressDuoCountAggregateOutputType | null
    _avg: OrderAddressDuoAvgAggregateOutputType | null
    _sum: OrderAddressDuoSumAggregateOutputType | null
    _min: OrderAddressDuoMinAggregateOutputType | null
    _max: OrderAddressDuoMaxAggregateOutputType | null
  }

  export type OrderAddressDuoAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    postalCode: number | null
  }

  export type OrderAddressDuoSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    postalCode: number | null
  }

  export type OrderAddressDuoMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    address: string | null
    address2: string | null
    address3: string | null
    city: string | null
    state: string | null
    postalCode: number | null
    country: string | null
    cellphone: string | null
    telephone: string | null
    default: boolean | null
    recipient: boolean | null
  }

  export type OrderAddressDuoMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    address: string | null
    address2: string | null
    address3: string | null
    city: string | null
    state: string | null
    postalCode: number | null
    country: string | null
    cellphone: string | null
    telephone: string | null
    default: boolean | null
    recipient: boolean | null
  }

  export type OrderAddressDuoCountAggregateOutputType = {
    id: number
    orderId: number
    address: number
    address2: number
    address3: number
    city: number
    state: number
    postalCode: number
    country: number
    cellphone: number
    telephone: number
    default: number
    recipient: number
    _all: number
  }


  export type OrderAddressDuoAvgAggregateInputType = {
    id?: true
    orderId?: true
    postalCode?: true
  }

  export type OrderAddressDuoSumAggregateInputType = {
    id?: true
    orderId?: true
    postalCode?: true
  }

  export type OrderAddressDuoMinAggregateInputType = {
    id?: true
    orderId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
  }

  export type OrderAddressDuoMaxAggregateInputType = {
    id?: true
    orderId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
  }

  export type OrderAddressDuoCountAggregateInputType = {
    id?: true
    orderId?: true
    address?: true
    address2?: true
    address3?: true
    city?: true
    state?: true
    postalCode?: true
    country?: true
    cellphone?: true
    telephone?: true
    default?: true
    recipient?: true
    _all?: true
  }

  export type OrderAddressDuoAggregateArgs = {
    /**
     * Filter which OrderAddressDuo to aggregate.
     * 
    **/
    where?: OrderAddressDuoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderAddressDuos to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderAddressDuoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrderAddressDuoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderAddressDuos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderAddressDuos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderAddressDuos
    **/
    _count?: true | OrderAddressDuoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAddressDuoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderAddressDuoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderAddressDuoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderAddressDuoMaxAggregateInputType
  }

  export type GetOrderAddressDuoAggregateType<T extends OrderAddressDuoAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderAddressDuo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderAddressDuo[P]>
      : GetScalarType<T[P], AggregateOrderAddressDuo[P]>
  }


    
    
  export type OrderAddressDuoGroupByArgs = {
    where?: OrderAddressDuoWhereInput
    orderBy?: Enumerable<OrderAddressDuoOrderByWithAggregationInput>
    by: Array<OrderAddressDuoScalarFieldEnum>
    having?: OrderAddressDuoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderAddressDuoCountAggregateInputType | true
    _avg?: OrderAddressDuoAvgAggregateInputType
    _sum?: OrderAddressDuoSumAggregateInputType
    _min?: OrderAddressDuoMinAggregateInputType
    _max?: OrderAddressDuoMaxAggregateInputType
  }


  export type OrderAddressDuoGroupByOutputType = {
    id: number
    orderId: number
    address: string
    address2: string | null
    address3: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone: string | null
    telephone: string | null
    default: boolean
    recipient: boolean
    _count: OrderAddressDuoCountAggregateOutputType | null
    _avg: OrderAddressDuoAvgAggregateOutputType | null
    _sum: OrderAddressDuoSumAggregateOutputType | null
    _min: OrderAddressDuoMinAggregateOutputType | null
    _max: OrderAddressDuoMaxAggregateOutputType | null
  }

  type GetOrderAddressDuoGroupByPayload<T extends OrderAddressDuoGroupByArgs> = Promise<
    Array<
      PickArray<OrderAddressDuoGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OrderAddressDuoGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OrderAddressDuoGroupByOutputType[P]> 
            : GetScalarType<T[P], OrderAddressDuoGroupByOutputType[P]>
        }
      > 
    >


  export type OrderAddressDuoSelect = {
    id?: boolean
    orderId?: boolean
    order?: boolean | OrderArgs
    address?: boolean
    address2?: boolean
    address3?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    country?: boolean
    cellphone?: boolean
    telephone?: boolean
    default?: boolean
    recipient?: boolean
  }

  export type OrderAddressDuoInclude = {
    order?: boolean | OrderArgs
  }

  export type OrderAddressDuoGetPayload<
    S extends boolean | null | undefined | OrderAddressDuoArgs,
    U = keyof S
      > = S extends true
        ? OrderAddressDuo
    : S extends undefined
    ? never
    : S extends OrderAddressDuoArgs | OrderAddressDuoFindManyArgs
    ?'include' extends U
    ? OrderAddressDuo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'order'
        ? OrderGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OrderAddressDuo ?OrderAddressDuo [P]
  : 
          P extends 'order'
        ? OrderGetPayload<S['select'][P]> : never
  } 
    : OrderAddressDuo
  : OrderAddressDuo


  type OrderAddressDuoCountArgs = Merge<
    Omit<OrderAddressDuoFindManyArgs, 'select' | 'include'> & {
      select?: OrderAddressDuoCountAggregateInputType | true
    }
  >

  export interface OrderAddressDuoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OrderAddressDuo that matches the filter.
     * @param {OrderAddressDuoFindUniqueArgs} args - Arguments to find a OrderAddressDuo
     * @example
     * // Get one OrderAddressDuo
     * const orderAddressDuo = await prisma.orderAddressDuo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderAddressDuoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderAddressDuoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrderAddressDuo'> extends True ? CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>> : CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo | null >, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T> | null >>

    /**
     * Find the first OrderAddressDuo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoFindFirstArgs} args - Arguments to find a OrderAddressDuo
     * @example
     * // Get one OrderAddressDuo
     * const orderAddressDuo = await prisma.orderAddressDuo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderAddressDuoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderAddressDuoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrderAddressDuo'> extends True ? CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>> : CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo | null >, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T> | null >>

    /**
     * Find zero or more OrderAddressDuos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderAddressDuos
     * const orderAddressDuos = await prisma.orderAddressDuo.findMany()
     * 
     * // Get first 10 OrderAddressDuos
     * const orderAddressDuos = await prisma.orderAddressDuo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderAddressDuoWithIdOnly = await prisma.orderAddressDuo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderAddressDuoFindManyArgs>(
      args?: SelectSubset<T, OrderAddressDuoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OrderAddressDuo>>, PrismaPromise<Array<OrderAddressDuoGetPayload<T>>>>

    /**
     * Create a OrderAddressDuo.
     * @param {OrderAddressDuoCreateArgs} args - Arguments to create a OrderAddressDuo.
     * @example
     * // Create one OrderAddressDuo
     * const OrderAddressDuo = await prisma.orderAddressDuo.create({
     *   data: {
     *     // ... data to create a OrderAddressDuo
     *   }
     * })
     * 
    **/
    create<T extends OrderAddressDuoCreateArgs>(
      args: SelectSubset<T, OrderAddressDuoCreateArgs>
    ): CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>>

    /**
     * Create many OrderAddressDuos.
     *     @param {OrderAddressDuoCreateManyArgs} args - Arguments to create many OrderAddressDuos.
     *     @example
     *     // Create many OrderAddressDuos
     *     const orderAddressDuo = await prisma.orderAddressDuo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderAddressDuoCreateManyArgs>(
      args?: SelectSubset<T, OrderAddressDuoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OrderAddressDuo.
     * @param {OrderAddressDuoDeleteArgs} args - Arguments to delete one OrderAddressDuo.
     * @example
     * // Delete one OrderAddressDuo
     * const OrderAddressDuo = await prisma.orderAddressDuo.delete({
     *   where: {
     *     // ... filter to delete one OrderAddressDuo
     *   }
     * })
     * 
    **/
    delete<T extends OrderAddressDuoDeleteArgs>(
      args: SelectSubset<T, OrderAddressDuoDeleteArgs>
    ): CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>>

    /**
     * Update one OrderAddressDuo.
     * @param {OrderAddressDuoUpdateArgs} args - Arguments to update one OrderAddressDuo.
     * @example
     * // Update one OrderAddressDuo
     * const orderAddressDuo = await prisma.orderAddressDuo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderAddressDuoUpdateArgs>(
      args: SelectSubset<T, OrderAddressDuoUpdateArgs>
    ): CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>>

    /**
     * Delete zero or more OrderAddressDuos.
     * @param {OrderAddressDuoDeleteManyArgs} args - Arguments to filter OrderAddressDuos to delete.
     * @example
     * // Delete a few OrderAddressDuos
     * const { count } = await prisma.orderAddressDuo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderAddressDuoDeleteManyArgs>(
      args?: SelectSubset<T, OrderAddressDuoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderAddressDuos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderAddressDuos
     * const orderAddressDuo = await prisma.orderAddressDuo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderAddressDuoUpdateManyArgs>(
      args: SelectSubset<T, OrderAddressDuoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderAddressDuo.
     * @param {OrderAddressDuoUpsertArgs} args - Arguments to update or create a OrderAddressDuo.
     * @example
     * // Update or create a OrderAddressDuo
     * const orderAddressDuo = await prisma.orderAddressDuo.upsert({
     *   create: {
     *     // ... data to create a OrderAddressDuo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderAddressDuo we want to update
     *   }
     * })
    **/
    upsert<T extends OrderAddressDuoUpsertArgs>(
      args: SelectSubset<T, OrderAddressDuoUpsertArgs>
    ): CheckSelect<T, Prisma__OrderAddressDuoClient<OrderAddressDuo>, Prisma__OrderAddressDuoClient<OrderAddressDuoGetPayload<T>>>

    /**
     * Count the number of OrderAddressDuos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoCountArgs} args - Arguments to filter OrderAddressDuos to count.
     * @example
     * // Count the number of OrderAddressDuos
     * const count = await prisma.orderAddressDuo.count({
     *   where: {
     *     // ... the filter for the OrderAddressDuos we want to count
     *   }
     * })
    **/
    count<T extends OrderAddressDuoCountArgs>(
      args?: Subset<T, OrderAddressDuoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderAddressDuoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderAddressDuo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAddressDuoAggregateArgs>(args: Subset<T, OrderAddressDuoAggregateArgs>): PrismaPromise<GetOrderAddressDuoAggregateType<T>>

    /**
     * Group by OrderAddressDuo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAddressDuoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderAddressDuoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderAddressDuoGroupByArgs['orderBy'] }
        : { orderBy?: OrderAddressDuoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderAddressDuoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderAddressDuoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderAddressDuo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderAddressDuoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order<T extends OrderArgs = {}>(args?: Subset<T, OrderArgs>): CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OrderAddressDuo findUnique
   */
  export type OrderAddressDuoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * Throw an Error if a OrderAddressDuo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderAddressDuo to fetch.
     * 
    **/
    where: OrderAddressDuoWhereUniqueInput
  }


  /**
   * OrderAddressDuo findFirst
   */
  export type OrderAddressDuoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * Throw an Error if a OrderAddressDuo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderAddressDuo to fetch.
     * 
    **/
    where?: OrderAddressDuoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderAddressDuos to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderAddressDuoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderAddressDuos.
     * 
    **/
    cursor?: OrderAddressDuoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderAddressDuos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderAddressDuos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderAddressDuos.
     * 
    **/
    distinct?: Enumerable<OrderAddressDuoScalarFieldEnum>
  }


  /**
   * OrderAddressDuo findMany
   */
  export type OrderAddressDuoFindManyArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * Filter, which OrderAddressDuos to fetch.
     * 
    **/
    where?: OrderAddressDuoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderAddressDuos to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderAddressDuoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderAddressDuos.
     * 
    **/
    cursor?: OrderAddressDuoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderAddressDuos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderAddressDuos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrderAddressDuoScalarFieldEnum>
  }


  /**
   * OrderAddressDuo create
   */
  export type OrderAddressDuoCreateArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * The data needed to create a OrderAddressDuo.
     * 
    **/
    data: XOR<OrderAddressDuoCreateInput, OrderAddressDuoUncheckedCreateInput>
  }


  /**
   * OrderAddressDuo createMany
   */
  export type OrderAddressDuoCreateManyArgs = {
    data: Enumerable<OrderAddressDuoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OrderAddressDuo update
   */
  export type OrderAddressDuoUpdateArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * The data needed to update a OrderAddressDuo.
     * 
    **/
    data: XOR<OrderAddressDuoUpdateInput, OrderAddressDuoUncheckedUpdateInput>
    /**
     * Choose, which OrderAddressDuo to update.
     * 
    **/
    where: OrderAddressDuoWhereUniqueInput
  }


  /**
   * OrderAddressDuo updateMany
   */
  export type OrderAddressDuoUpdateManyArgs = {
    data: XOR<OrderAddressDuoUpdateManyMutationInput, OrderAddressDuoUncheckedUpdateManyInput>
    where?: OrderAddressDuoWhereInput
  }


  /**
   * OrderAddressDuo upsert
   */
  export type OrderAddressDuoUpsertArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * The filter to search for the OrderAddressDuo to update in case it exists.
     * 
    **/
    where: OrderAddressDuoWhereUniqueInput
    /**
     * In case the OrderAddressDuo found by the `where` argument doesn't exist, create a new OrderAddressDuo with this data.
     * 
    **/
    create: XOR<OrderAddressDuoCreateInput, OrderAddressDuoUncheckedCreateInput>
    /**
     * In case the OrderAddressDuo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrderAddressDuoUpdateInput, OrderAddressDuoUncheckedUpdateInput>
  }


  /**
   * OrderAddressDuo delete
   */
  export type OrderAddressDuoDeleteArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
    /**
     * Filter which OrderAddressDuo to delete.
     * 
    **/
    where: OrderAddressDuoWhereUniqueInput
  }


  /**
   * OrderAddressDuo deleteMany
   */
  export type OrderAddressDuoDeleteManyArgs = {
    where?: OrderAddressDuoWhereInput
  }


  /**
   * OrderAddressDuo without action
   */
  export type OrderAddressDuoArgs = {
    /**
     * Select specific fields to fetch from the OrderAddressDuo
     * 
    **/
    select?: OrderAddressDuoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderAddressDuoInclude | null
  }



  /**
   * Model OrderItem
   */


  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    productsId: number | null
    amount: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    productsId: number | null
    amount: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    productsId: number | null
    amount: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    productsId: number | null
    amount: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productsId: number
    amount: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    productsId?: true
    amount?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    productsId?: true
    amount?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productsId?: true
    amount?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productsId?: true
    amount?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productsId?: true
    amount?: true
    _all?: true
  }

  export type OrderItemAggregateArgs = {
    /**
     * Filter which OrderItem to aggregate.
     * 
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }


    
    
  export type OrderItemGroupByArgs = {
    where?: OrderItemWhereInput
    orderBy?: Enumerable<OrderItemOrderByWithAggregationInput>
    by: Array<OrderItemScalarFieldEnum>
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }


  export type OrderItemGroupByOutputType = {
    id: number
    orderId: number
    productsId: number
    amount: number
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Promise<
    Array<
      PickArray<OrderItemGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]> 
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      > 
    >


  export type OrderItemSelect = {
    id?: boolean
    orderId?: boolean
    productsId?: boolean
    amount?: boolean
    order?: boolean | OrderArgs
    product?: boolean | productArgs
  }

  export type OrderItemInclude = {
    order?: boolean | OrderArgs
    product?: boolean | productArgs
  }

  export type OrderItemGetPayload<
    S extends boolean | null | undefined | OrderItemArgs,
    U = keyof S
      > = S extends true
        ? OrderItem
    : S extends undefined
    ? never
    : S extends OrderItemArgs | OrderItemFindManyArgs
    ?'include' extends U
    ? OrderItem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'order'
        ? OrderGetPayload<S['include'][P]> :
        P extends 'product'
        ? productGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OrderItem ?OrderItem [P]
  : 
          P extends 'order'
        ? OrderGetPayload<S['select'][P]> :
        P extends 'product'
        ? productGetPayload<S['select'][P]> : never
  } 
    : OrderItem
  : OrderItem


  type OrderItemCountArgs = Merge<
    Omit<OrderItemFindManyArgs, 'select' | 'include'> & {
      select?: OrderItemCountAggregateInputType | true
    }
  >

  export interface OrderItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrderItem'> extends True ? CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>> : CheckSelect<T, Prisma__OrderItemClient<OrderItem | null >, Prisma__OrderItemClient<OrderItemGetPayload<T> | null >>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrderItem'> extends True ? CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>> : CheckSelect<T, Prisma__OrderItemClient<OrderItem | null >, Prisma__OrderItemClient<OrderItemGetPayload<T> | null >>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderItemFindManyArgs>(
      args?: SelectSubset<T, OrderItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
    **/
    create<T extends OrderItemCreateArgs>(
      args: SelectSubset<T, OrderItemCreateArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Create many OrderItems.
     *     @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     *     @example
     *     // Create many OrderItems
     *     const orderItem = await prisma.orderItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderItemCreateManyArgs>(
      args?: SelectSubset<T, OrderItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
    **/
    delete<T extends OrderItemDeleteArgs>(
      args: SelectSubset<T, OrderItemDeleteArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderItemUpdateArgs>(
      args: SelectSubset<T, OrderItemUpdateArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderItemDeleteManyArgs>(
      args?: SelectSubset<T, OrderItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderItemUpdateManyArgs>(
      args: SelectSubset<T, OrderItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
    **/
    upsert<T extends OrderItemUpsertArgs>(
      args: SelectSubset<T, OrderItemUpsertArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order<T extends OrderArgs = {}>(args?: Subset<T, OrderArgs>): CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>;

    product<T extends productArgs = {}>(args?: Subset<T, productArgs>): CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * Throw an Error if a OrderItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderItem to fetch.
     * 
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * Throw an Error if a OrderItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderItem to fetch.
     * 
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     * 
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     * 
    **/
    distinct?: Enumerable<OrderItemScalarFieldEnum>
  }


  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * Filter, which OrderItems to fetch.
     * 
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     * 
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrderItemScalarFieldEnum>
  }


  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * The data needed to create a OrderItem.
     * 
    **/
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }


  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs = {
    data: Enumerable<OrderItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * The data needed to update a OrderItem.
     * 
    **/
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     * 
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs = {
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    where?: OrderItemWhereInput
  }


  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     * 
    **/
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     * 
    **/
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }


  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
    /**
     * Filter which OrderItem to delete.
     * 
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs = {
    where?: OrderItemWhereInput
  }


  /**
   * OrderItem without action
   */
  export type OrderItemArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
     * 
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderItemInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    type: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    type: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    type: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    type: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    price: number
    type: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    type?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    type?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    type?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }


    
    
  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    name: string
    price: number
    type: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Promise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ProductGroupByOutputType[P]> 
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      > 
    >


  export type productSelect = {
    id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    orderItem?: boolean | OrderItemFindManyArgs
    productType?: boolean | productTypeArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productInclude = {
    orderItem?: boolean | OrderItemFindManyArgs
    productType?: boolean | productTypeArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productGetPayload<
    S extends boolean | null | undefined | productArgs,
    U = keyof S
      > = S extends true
        ? product
    : S extends undefined
    ? never
    : S extends productArgs | productFindManyArgs
    ?'include' extends U
    ? product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'orderItem'
        ? Array < OrderItemGetPayload<S['include'][P]>>  :
        P extends 'productType'
        ? productTypeGetPayload<S['include'][P]> | null :
        P extends '_count'
        ? ProductCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof product ?product [P]
  : 
          P extends 'orderItem'
        ? Array < OrderItemGetPayload<S['select'][P]>>  :
        P extends 'productType'
        ? productTypeGetPayload<S['select'][P]> | null :
        P extends '_count'
        ? ProductCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : product
  : product


  type productCountArgs = Merge<
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface productDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product>>, PrismaPromise<Array<productGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orderItem<T extends OrderItemFindManyArgs = {}>(args?: Subset<T, OrderItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>;

    productType<T extends productTypeArgs = {}>(args?: Subset<T, productTypeArgs>): CheckSelect<T, Prisma__productTypeClient<productType | null >, Prisma__productTypeClient<productTypeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * product findUnique
   */
  export type productFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product findFirst
   */
  export type productFindFirstArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to create a product.
     * 
    **/
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to update a product.
     * 
    **/
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
     * 
    **/
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     * 
    **/
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter which product to delete.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    where?: productWhereInput
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
  }



  /**
   * Model productType
   */


  export type AggregateProductType = {
    _count: ProductTypeCountAggregateOutputType | null
    _avg: ProductTypeAvgAggregateOutputType | null
    _sum: ProductTypeSumAggregateOutputType | null
    _min: ProductTypeMinAggregateOutputType | null
    _max: ProductTypeMaxAggregateOutputType | null
  }

  export type ProductTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ProductTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ProductTypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ProductTypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ProductTypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type ProductTypeAvgAggregateInputType = {
    id?: true
  }

  export type ProductTypeSumAggregateInputType = {
    id?: true
  }

  export type ProductTypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type ProductTypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type ProductTypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type ProductTypeAggregateArgs = {
    /**
     * Filter which productType to aggregate.
     * 
    **/
    where?: productTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<productTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: productTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productTypes
    **/
    _count?: true | ProductTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTypeMaxAggregateInputType
  }

  export type GetProductTypeAggregateType<T extends ProductTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateProductType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductType[P]>
      : GetScalarType<T[P], AggregateProductType[P]>
  }


    
    
  export type ProductTypeGroupByArgs = {
    where?: productTypeWhereInput
    orderBy?: Enumerable<productTypeOrderByWithAggregationInput>
    by: Array<ProductTypeScalarFieldEnum>
    having?: productTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTypeCountAggregateInputType | true
    _avg?: ProductTypeAvgAggregateInputType
    _sum?: ProductTypeSumAggregateInputType
    _min?: ProductTypeMinAggregateInputType
    _max?: ProductTypeMaxAggregateInputType
  }


  export type ProductTypeGroupByOutputType = {
    id: number
    type: string
    _count: ProductTypeCountAggregateOutputType | null
    _avg: ProductTypeAvgAggregateOutputType | null
    _sum: ProductTypeSumAggregateOutputType | null
    _min: ProductTypeMinAggregateOutputType | null
    _max: ProductTypeMaxAggregateOutputType | null
  }

  type GetProductTypeGroupByPayload<T extends ProductTypeGroupByArgs> = Promise<
    Array<
      PickArray<ProductTypeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ProductTypeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ProductTypeGroupByOutputType[P]> 
            : GetScalarType<T[P], ProductTypeGroupByOutputType[P]>
        }
      > 
    >


  export type productTypeSelect = {
    id?: boolean
    type?: boolean
    product?: boolean | productFindManyArgs
    _count?: boolean | ProductTypeCountOutputTypeArgs
  }

  export type productTypeInclude = {
    product?: boolean | productFindManyArgs
    _count?: boolean | ProductTypeCountOutputTypeArgs
  }

  export type productTypeGetPayload<
    S extends boolean | null | undefined | productTypeArgs,
    U = keyof S
      > = S extends true
        ? productType
    : S extends undefined
    ? never
    : S extends productTypeArgs | productTypeFindManyArgs
    ?'include' extends U
    ? productType  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? Array < productGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ProductTypeCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof productType ?productType [P]
  : 
          P extends 'product'
        ? Array < productGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ProductTypeCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : productType
  : productType


  type productTypeCountArgs = Merge<
    Omit<productTypeFindManyArgs, 'select' | 'include'> & {
      select?: ProductTypeCountAggregateInputType | true
    }
  >

  export interface productTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProductType that matches the filter.
     * @param {productTypeFindUniqueArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'productType'> extends True ? CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>> : CheckSelect<T, Prisma__productTypeClient<productType | null >, Prisma__productTypeClient<productTypeGetPayload<T> | null >>

    /**
     * Find the first ProductType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productTypeFindFirstArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'productType'> extends True ? CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>> : CheckSelect<T, Prisma__productTypeClient<productType | null >, Prisma__productTypeClient<productTypeGetPayload<T> | null >>

    /**
     * Find zero or more ProductTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTypes
     * const productTypes = await prisma.productType.findMany()
     * 
     * // Get first 10 ProductTypes
     * const productTypes = await prisma.productType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productTypeWithIdOnly = await prisma.productType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productTypeFindManyArgs>(
      args?: SelectSubset<T, productTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<productType>>, PrismaPromise<Array<productTypeGetPayload<T>>>>

    /**
     * Create a ProductType.
     * @param {productTypeCreateArgs} args - Arguments to create a ProductType.
     * @example
     * // Create one ProductType
     * const ProductType = await prisma.productType.create({
     *   data: {
     *     // ... data to create a ProductType
     *   }
     * })
     * 
    **/
    create<T extends productTypeCreateArgs>(
      args: SelectSubset<T, productTypeCreateArgs>
    ): CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>>

    /**
     * Create many ProductTypes.
     *     @param {productTypeCreateManyArgs} args - Arguments to create many ProductTypes.
     *     @example
     *     // Create many ProductTypes
     *     const productType = await prisma.productType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productTypeCreateManyArgs>(
      args?: SelectSubset<T, productTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProductType.
     * @param {productTypeDeleteArgs} args - Arguments to delete one ProductType.
     * @example
     * // Delete one ProductType
     * const ProductType = await prisma.productType.delete({
     *   where: {
     *     // ... filter to delete one ProductType
     *   }
     * })
     * 
    **/
    delete<T extends productTypeDeleteArgs>(
      args: SelectSubset<T, productTypeDeleteArgs>
    ): CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>>

    /**
     * Update one ProductType.
     * @param {productTypeUpdateArgs} args - Arguments to update one ProductType.
     * @example
     * // Update one ProductType
     * const productType = await prisma.productType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productTypeUpdateArgs>(
      args: SelectSubset<T, productTypeUpdateArgs>
    ): CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>>

    /**
     * Delete zero or more ProductTypes.
     * @param {productTypeDeleteManyArgs} args - Arguments to filter ProductTypes to delete.
     * @example
     * // Delete a few ProductTypes
     * const { count } = await prisma.productType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productTypeDeleteManyArgs>(
      args?: SelectSubset<T, productTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTypes
     * const productType = await prisma.productType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productTypeUpdateManyArgs>(
      args: SelectSubset<T, productTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductType.
     * @param {productTypeUpsertArgs} args - Arguments to update or create a ProductType.
     * @example
     * // Update or create a ProductType
     * const productType = await prisma.productType.upsert({
     *   create: {
     *     // ... data to create a ProductType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductType we want to update
     *   }
     * })
    **/
    upsert<T extends productTypeUpsertArgs>(
      args: SelectSubset<T, productTypeUpsertArgs>
    ): CheckSelect<T, Prisma__productTypeClient<productType>, Prisma__productTypeClient<productTypeGetPayload<T>>>

    /**
     * Count the number of ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productTypeCountArgs} args - Arguments to filter ProductTypes to count.
     * @example
     * // Count the number of ProductTypes
     * const count = await prisma.productType.count({
     *   where: {
     *     // ... the filter for the ProductTypes we want to count
     *   }
     * })
    **/
    count<T extends productTypeCountArgs>(
      args?: Subset<T, productTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTypeAggregateArgs>(args: Subset<T, ProductTypeAggregateArgs>): PrismaPromise<GetProductTypeAggregateType<T>>

    /**
     * Group by ProductType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTypeGroupByArgs['orderBy'] }
        : { orderBy?: ProductTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTypeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for productType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productFindManyArgs = {}>(args?: Subset<T, productFindManyArgs>): CheckSelect<T, PrismaPromise<Array<product>>, PrismaPromise<Array<productGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * productType findUnique
   */
  export type productTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * Throw an Error if a productType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which productType to fetch.
     * 
    **/
    where: productTypeWhereUniqueInput
  }


  /**
   * productType findFirst
   */
  export type productTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * Throw an Error if a productType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which productType to fetch.
     * 
    **/
    where?: productTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<productTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productTypes.
     * 
    **/
    cursor?: productTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productTypes.
     * 
    **/
    distinct?: Enumerable<ProductTypeScalarFieldEnum>
  }


  /**
   * productType findMany
   */
  export type productTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * Filter, which productTypes to fetch.
     * 
    **/
    where?: productTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<productTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productTypes.
     * 
    **/
    cursor?: productTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductTypeScalarFieldEnum>
  }


  /**
   * productType create
   */
  export type productTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * The data needed to create a productType.
     * 
    **/
    data: XOR<productTypeCreateInput, productTypeUncheckedCreateInput>
  }


  /**
   * productType createMany
   */
  export type productTypeCreateManyArgs = {
    data: Enumerable<productTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * productType update
   */
  export type productTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * The data needed to update a productType.
     * 
    **/
    data: XOR<productTypeUpdateInput, productTypeUncheckedUpdateInput>
    /**
     * Choose, which productType to update.
     * 
    **/
    where: productTypeWhereUniqueInput
  }


  /**
   * productType updateMany
   */
  export type productTypeUpdateManyArgs = {
    data: XOR<productTypeUpdateManyMutationInput, productTypeUncheckedUpdateManyInput>
    where?: productTypeWhereInput
  }


  /**
   * productType upsert
   */
  export type productTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * The filter to search for the productType to update in case it exists.
     * 
    **/
    where: productTypeWhereUniqueInput
    /**
     * In case the productType found by the `where` argument doesn't exist, create a new productType with this data.
     * 
    **/
    create: XOR<productTypeCreateInput, productTypeUncheckedCreateInput>
    /**
     * In case the productType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<productTypeUpdateInput, productTypeUncheckedUpdateInput>
  }


  /**
   * productType delete
   */
  export type productTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
    /**
     * Filter which productType to delete.
     * 
    **/
    where: productTypeWhereUniqueInput
  }


  /**
   * productType deleteMany
   */
  export type productTypeDeleteManyArgs = {
    where?: productTypeWhereInput
  }


  /**
   * productType without action
   */
  export type productTypeArgs = {
    /**
     * Select specific fields to fetch from the productType
     * 
    **/
    select?: productTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productTypeInclude | null
  }



  /**
   * Model DriverRoutes
   */


  export type AggregateDriverRoutes = {
    _count: DriverRoutesCountAggregateOutputType | null
    _avg: DriverRoutesAvgAggregateOutputType | null
    _sum: DriverRoutesSumAggregateOutputType | null
    _min: DriverRoutesMinAggregateOutputType | null
    _max: DriverRoutesMaxAggregateOutputType | null
  }

  export type DriverRoutesAvgAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type DriverRoutesSumAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type DriverRoutesMinAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type DriverRoutesMaxAggregateOutputType = {
    id: number | null
    driverId: number | null
  }

  export type DriverRoutesCountAggregateOutputType = {
    id: number
    driverId: number
    _all: number
  }


  export type DriverRoutesAvgAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type DriverRoutesSumAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type DriverRoutesMinAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type DriverRoutesMaxAggregateInputType = {
    id?: true
    driverId?: true
  }

  export type DriverRoutesCountAggregateInputType = {
    id?: true
    driverId?: true
    _all?: true
  }

  export type DriverRoutesAggregateArgs = {
    /**
     * Filter which DriverRoutes to aggregate.
     * 
    **/
    where?: DriverRoutesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DriverRoutes to fetch.
     * 
    **/
    orderBy?: Enumerable<DriverRoutesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DriverRoutesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DriverRoutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DriverRoutes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DriverRoutes
    **/
    _count?: true | DriverRoutesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DriverRoutesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DriverRoutesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DriverRoutesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DriverRoutesMaxAggregateInputType
  }

  export type GetDriverRoutesAggregateType<T extends DriverRoutesAggregateArgs> = {
        [P in keyof T & keyof AggregateDriverRoutes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDriverRoutes[P]>
      : GetScalarType<T[P], AggregateDriverRoutes[P]>
  }


    
    
  export type DriverRoutesGroupByArgs = {
    where?: DriverRoutesWhereInput
    orderBy?: Enumerable<DriverRoutesOrderByWithAggregationInput>
    by: Array<DriverRoutesScalarFieldEnum>
    having?: DriverRoutesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DriverRoutesCountAggregateInputType | true
    _avg?: DriverRoutesAvgAggregateInputType
    _sum?: DriverRoutesSumAggregateInputType
    _min?: DriverRoutesMinAggregateInputType
    _max?: DriverRoutesMaxAggregateInputType
  }


  export type DriverRoutesGroupByOutputType = {
    id: number
    driverId: number
    _count: DriverRoutesCountAggregateOutputType | null
    _avg: DriverRoutesAvgAggregateOutputType | null
    _sum: DriverRoutesSumAggregateOutputType | null
    _min: DriverRoutesMinAggregateOutputType | null
    _max: DriverRoutesMaxAggregateOutputType | null
  }

  type GetDriverRoutesGroupByPayload<T extends DriverRoutesGroupByArgs> = Promise<
    Array<
      PickArray<DriverRoutesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DriverRoutesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DriverRoutesGroupByOutputType[P]> 
            : GetScalarType<T[P], DriverRoutesGroupByOutputType[P]>
        }
      > 
    >


  export type DriverRoutesSelect = {
    id?: boolean
    driverId?: boolean
    driver?: boolean | UserArgs
    orders?: boolean | OrderFindManyArgs
    _count?: boolean | DriverRoutesCountOutputTypeArgs
  }

  export type DriverRoutesInclude = {
    driver?: boolean | UserArgs
    orders?: boolean | OrderFindManyArgs
    _count?: boolean | DriverRoutesCountOutputTypeArgs
  }

  export type DriverRoutesGetPayload<
    S extends boolean | null | undefined | DriverRoutesArgs,
    U = keyof S
      > = S extends true
        ? DriverRoutes
    : S extends undefined
    ? never
    : S extends DriverRoutesArgs | DriverRoutesFindManyArgs
    ?'include' extends U
    ? DriverRoutes  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'driver'
        ? UserGetPayload<S['include'][P]> :
        P extends 'orders'
        ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? DriverRoutesCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DriverRoutes ?DriverRoutes [P]
  : 
          P extends 'driver'
        ? UserGetPayload<S['select'][P]> :
        P extends 'orders'
        ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? DriverRoutesCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : DriverRoutes
  : DriverRoutes


  type DriverRoutesCountArgs = Merge<
    Omit<DriverRoutesFindManyArgs, 'select' | 'include'> & {
      select?: DriverRoutesCountAggregateInputType | true
    }
  >

  export interface DriverRoutesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DriverRoutes that matches the filter.
     * @param {DriverRoutesFindUniqueArgs} args - Arguments to find a DriverRoutes
     * @example
     * // Get one DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DriverRoutesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DriverRoutesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DriverRoutes'> extends True ? CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>> : CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes | null >, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T> | null >>

    /**
     * Find the first DriverRoutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesFindFirstArgs} args - Arguments to find a DriverRoutes
     * @example
     * // Get one DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DriverRoutesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DriverRoutesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DriverRoutes'> extends True ? CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>> : CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes | null >, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T> | null >>

    /**
     * Find zero or more DriverRoutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.findMany()
     * 
     * // Get first 10 DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const driverRoutesWithIdOnly = await prisma.driverRoutes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DriverRoutesFindManyArgs>(
      args?: SelectSubset<T, DriverRoutesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DriverRoutes>>, PrismaPromise<Array<DriverRoutesGetPayload<T>>>>

    /**
     * Create a DriverRoutes.
     * @param {DriverRoutesCreateArgs} args - Arguments to create a DriverRoutes.
     * @example
     * // Create one DriverRoutes
     * const DriverRoutes = await prisma.driverRoutes.create({
     *   data: {
     *     // ... data to create a DriverRoutes
     *   }
     * })
     * 
    **/
    create<T extends DriverRoutesCreateArgs>(
      args: SelectSubset<T, DriverRoutesCreateArgs>
    ): CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>>

    /**
     * Create many DriverRoutes.
     *     @param {DriverRoutesCreateManyArgs} args - Arguments to create many DriverRoutes.
     *     @example
     *     // Create many DriverRoutes
     *     const driverRoutes = await prisma.driverRoutes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DriverRoutesCreateManyArgs>(
      args?: SelectSubset<T, DriverRoutesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DriverRoutes.
     * @param {DriverRoutesDeleteArgs} args - Arguments to delete one DriverRoutes.
     * @example
     * // Delete one DriverRoutes
     * const DriverRoutes = await prisma.driverRoutes.delete({
     *   where: {
     *     // ... filter to delete one DriverRoutes
     *   }
     * })
     * 
    **/
    delete<T extends DriverRoutesDeleteArgs>(
      args: SelectSubset<T, DriverRoutesDeleteArgs>
    ): CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>>

    /**
     * Update one DriverRoutes.
     * @param {DriverRoutesUpdateArgs} args - Arguments to update one DriverRoutes.
     * @example
     * // Update one DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DriverRoutesUpdateArgs>(
      args: SelectSubset<T, DriverRoutesUpdateArgs>
    ): CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>>

    /**
     * Delete zero or more DriverRoutes.
     * @param {DriverRoutesDeleteManyArgs} args - Arguments to filter DriverRoutes to delete.
     * @example
     * // Delete a few DriverRoutes
     * const { count } = await prisma.driverRoutes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DriverRoutesDeleteManyArgs>(
      args?: SelectSubset<T, DriverRoutesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DriverRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DriverRoutesUpdateManyArgs>(
      args: SelectSubset<T, DriverRoutesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DriverRoutes.
     * @param {DriverRoutesUpsertArgs} args - Arguments to update or create a DriverRoutes.
     * @example
     * // Update or create a DriverRoutes
     * const driverRoutes = await prisma.driverRoutes.upsert({
     *   create: {
     *     // ... data to create a DriverRoutes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DriverRoutes we want to update
     *   }
     * })
    **/
    upsert<T extends DriverRoutesUpsertArgs>(
      args: SelectSubset<T, DriverRoutesUpsertArgs>
    ): CheckSelect<T, Prisma__DriverRoutesClient<DriverRoutes>, Prisma__DriverRoutesClient<DriverRoutesGetPayload<T>>>

    /**
     * Count the number of DriverRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesCountArgs} args - Arguments to filter DriverRoutes to count.
     * @example
     * // Count the number of DriverRoutes
     * const count = await prisma.driverRoutes.count({
     *   where: {
     *     // ... the filter for the DriverRoutes we want to count
     *   }
     * })
    **/
    count<T extends DriverRoutesCountArgs>(
      args?: Subset<T, DriverRoutesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DriverRoutesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DriverRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DriverRoutesAggregateArgs>(args: Subset<T, DriverRoutesAggregateArgs>): PrismaPromise<GetDriverRoutesAggregateType<T>>

    /**
     * Group by DriverRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverRoutesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DriverRoutesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DriverRoutesGroupByArgs['orderBy'] }
        : { orderBy?: DriverRoutesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DriverRoutesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDriverRoutesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DriverRoutes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DriverRoutesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    driver<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    orders<T extends OrderFindManyArgs = {}>(args?: Subset<T, OrderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DriverRoutes findUnique
   */
  export type DriverRoutesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * Throw an Error if a DriverRoutes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DriverRoutes to fetch.
     * 
    **/
    where: DriverRoutesWhereUniqueInput
  }


  /**
   * DriverRoutes findFirst
   */
  export type DriverRoutesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * Throw an Error if a DriverRoutes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DriverRoutes to fetch.
     * 
    **/
    where?: DriverRoutesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DriverRoutes to fetch.
     * 
    **/
    orderBy?: Enumerable<DriverRoutesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DriverRoutes.
     * 
    **/
    cursor?: DriverRoutesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DriverRoutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DriverRoutes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DriverRoutes.
     * 
    **/
    distinct?: Enumerable<DriverRoutesScalarFieldEnum>
  }


  /**
   * DriverRoutes findMany
   */
  export type DriverRoutesFindManyArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * Filter, which DriverRoutes to fetch.
     * 
    **/
    where?: DriverRoutesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DriverRoutes to fetch.
     * 
    **/
    orderBy?: Enumerable<DriverRoutesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DriverRoutes.
     * 
    **/
    cursor?: DriverRoutesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DriverRoutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DriverRoutes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DriverRoutesScalarFieldEnum>
  }


  /**
   * DriverRoutes create
   */
  export type DriverRoutesCreateArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * The data needed to create a DriverRoutes.
     * 
    **/
    data: XOR<DriverRoutesCreateInput, DriverRoutesUncheckedCreateInput>
  }


  /**
   * DriverRoutes createMany
   */
  export type DriverRoutesCreateManyArgs = {
    data: Enumerable<DriverRoutesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DriverRoutes update
   */
  export type DriverRoutesUpdateArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * The data needed to update a DriverRoutes.
     * 
    **/
    data: XOR<DriverRoutesUpdateInput, DriverRoutesUncheckedUpdateInput>
    /**
     * Choose, which DriverRoutes to update.
     * 
    **/
    where: DriverRoutesWhereUniqueInput
  }


  /**
   * DriverRoutes updateMany
   */
  export type DriverRoutesUpdateManyArgs = {
    data: XOR<DriverRoutesUpdateManyMutationInput, DriverRoutesUncheckedUpdateManyInput>
    where?: DriverRoutesWhereInput
  }


  /**
   * DriverRoutes upsert
   */
  export type DriverRoutesUpsertArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * The filter to search for the DriverRoutes to update in case it exists.
     * 
    **/
    where: DriverRoutesWhereUniqueInput
    /**
     * In case the DriverRoutes found by the `where` argument doesn't exist, create a new DriverRoutes with this data.
     * 
    **/
    create: XOR<DriverRoutesCreateInput, DriverRoutesUncheckedCreateInput>
    /**
     * In case the DriverRoutes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DriverRoutesUpdateInput, DriverRoutesUncheckedUpdateInput>
  }


  /**
   * DriverRoutes delete
   */
  export type DriverRoutesDeleteArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
    /**
     * Filter which DriverRoutes to delete.
     * 
    **/
    where: DriverRoutesWhereUniqueInput
  }


  /**
   * DriverRoutes deleteMany
   */
  export type DriverRoutesDeleteManyArgs = {
    where?: DriverRoutesWhereInput
  }


  /**
   * DriverRoutes without action
   */
  export type DriverRoutesArgs = {
    /**
     * Select specific fields to fetch from the DriverRoutes
     * 
    **/
    select?: DriverRoutesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DriverRoutesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    middleName: 'middleName',
    password: 'password',
    email: 'email',
    role: 'role',
    company: 'company',
    branchName: 'branchName',
    lastSaleDate: 'lastSaleDate',
    lastLogin: 'lastLogin',
    preferredLanguage: 'preferredLanguage',
    licenseId: 'licenseId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    address: 'address',
    address2: 'address2',
    address3: 'address3',
    city: 'city',
    state: 'state',
    postalCode: 'postalCode',
    country: 'country',
    cellphone: 'cellphone',
    telephone: 'telephone',
    default: 'default',
    recipient: 'recipient'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    timePlaced: 'timePlaced',
    recieverFirstName: 'recieverFirstName',
    recieverLastName: 'recieverLastName',
    totalItems: 'totalItems',
    totalPrice: 'totalPrice',
    paymentType: 'paymentType',
    status: 'status',
    location: 'location',
    routeId: 'routeId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderAddressDuoScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    address: 'address',
    address2: 'address2',
    address3: 'address3',
    city: 'city',
    state: 'state',
    postalCode: 'postalCode',
    country: 'country',
    cellphone: 'cellphone',
    telephone: 'telephone',
    default: 'default',
    recipient: 'recipient'
  };

  export type OrderAddressDuoScalarFieldEnum = (typeof OrderAddressDuoScalarFieldEnum)[keyof typeof OrderAddressDuoScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productsId: 'productsId',
    amount: 'amount'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    type: 'type'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductTypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type ProductTypeScalarFieldEnum = (typeof ProductTypeScalarFieldEnum)[keyof typeof ProductTypeScalarFieldEnum]


  export const DriverRoutesScalarFieldEnum: {
    id: 'id',
    driverId: 'driverId'
  };

  export type DriverRoutesScalarFieldEnum = (typeof DriverRoutesScalarFieldEnum)[keyof typeof DriverRoutesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    middleName?: StringNullableFilter | string | null
    password?: StringFilter | string
    email?: StringFilter | string
    role?: StringFilter | string
    company?: StringNullableFilter | string | null
    branchName?: StringNullableFilter | string | null
    lastSaleDate?: DateTimeNullableFilter | Date | string | null
    lastLogin?: DateTimeNullableFilter | Date | string | null
    preferredLanguage?: StringFilter | string
    licenseId?: IntNullableFilter | number | null
    addresses?: AddressListRelationFilter
    orders?: OrderListRelationFilter
    pastRoutes?: DriverRoutesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    company?: SortOrder
    branchName?: SortOrder
    lastSaleDate?: SortOrder
    lastLogin?: SortOrder
    preferredLanguage?: SortOrder
    licenseId?: SortOrder
    addresses?: addressOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    pastRoutes?: DriverRoutesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    licenseId?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    company?: SortOrder
    branchName?: SortOrder
    lastSaleDate?: SortOrder
    lastLogin?: SortOrder
    preferredLanguage?: SortOrder
    licenseId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    middleName?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    company?: StringNullableWithAggregatesFilter | string | null
    branchName?: StringNullableWithAggregatesFilter | string | null
    lastSaleDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter | Date | string | null
    preferredLanguage?: StringWithAggregatesFilter | string
    licenseId?: IntNullableWithAggregatesFilter | number | null
  }

  export type addressWhereInput = {
    AND?: Enumerable<addressWhereInput>
    OR?: Enumerable<addressWhereInput>
    NOT?: Enumerable<addressWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    address?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    postalCode?: IntFilter | number
    country?: StringFilter | string
    cellphone?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    default?: BoolFilter | boolean
    recipient?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type addressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type addressWhereUniqueInput = {
    id?: number
  }

  export type addressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
    _count?: addressCountOrderByAggregateInput
    _avg?: addressAvgOrderByAggregateInput
    _max?: addressMaxOrderByAggregateInput
    _min?: addressMinOrderByAggregateInput
    _sum?: addressSumOrderByAggregateInput
  }

  export type addressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<addressScalarWhereWithAggregatesInput>
    OR?: Enumerable<addressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<addressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    address2?: StringNullableWithAggregatesFilter | string | null
    address3?: StringNullableWithAggregatesFilter | string | null
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    postalCode?: IntWithAggregatesFilter | number
    country?: StringWithAggregatesFilter | string
    cellphone?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
    default?: BoolWithAggregatesFilter | boolean
    recipient?: BoolWithAggregatesFilter | boolean
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    timePlaced?: DateTimeFilter | Date | string
    recieverFirstName?: StringFilter | string
    recieverLastName?: StringFilter | string
    totalItems?: IntFilter | number
    totalPrice?: IntFilter | number
    paymentType?: StringFilter | string
    status?: StringFilter | string
    location?: StringFilter | string
    items?: OrderItemListRelationFilter
    addresses?: OrderAddressDuoListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    routeId?: IntNullableFilter | number | null
    route?: XOR<DriverRoutesRelationFilter, DriverRoutesWhereInput> | null
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    timePlaced?: SortOrder
    recieverFirstName?: SortOrder
    recieverLastName?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    paymentType?: SortOrder
    status?: SortOrder
    location?: SortOrder
    items?: OrderItemOrderByRelationAggregateInput
    addresses?: OrderAddressDuoOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    routeId?: SortOrder
    route?: DriverRoutesOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = {
    id?: number
  }

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    timePlaced?: SortOrder
    recieverFirstName?: SortOrder
    recieverLastName?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    paymentType?: SortOrder
    status?: SortOrder
    location?: SortOrder
    routeId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    timePlaced?: DateTimeWithAggregatesFilter | Date | string
    recieverFirstName?: StringWithAggregatesFilter | string
    recieverLastName?: StringWithAggregatesFilter | string
    totalItems?: IntWithAggregatesFilter | number
    totalPrice?: IntWithAggregatesFilter | number
    paymentType?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    routeId?: IntNullableWithAggregatesFilter | number | null
  }

  export type OrderAddressDuoWhereInput = {
    AND?: Enumerable<OrderAddressDuoWhereInput>
    OR?: Enumerable<OrderAddressDuoWhereInput>
    NOT?: Enumerable<OrderAddressDuoWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    address?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    postalCode?: IntFilter | number
    country?: StringFilter | string
    cellphone?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    default?: BoolFilter | boolean
    recipient?: BoolFilter | boolean
  }

  export type OrderAddressDuoOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    order?: OrderOrderByWithRelationInput
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type OrderAddressDuoWhereUniqueInput = {
    id?: number
  }

  export type OrderAddressDuoOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
    _count?: OrderAddressDuoCountOrderByAggregateInput
    _avg?: OrderAddressDuoAvgOrderByAggregateInput
    _max?: OrderAddressDuoMaxOrderByAggregateInput
    _min?: OrderAddressDuoMinOrderByAggregateInput
    _sum?: OrderAddressDuoSumOrderByAggregateInput
  }

  export type OrderAddressDuoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderAddressDuoScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderAddressDuoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderAddressDuoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    orderId?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    address2?: StringNullableWithAggregatesFilter | string | null
    address3?: StringNullableWithAggregatesFilter | string | null
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    postalCode?: IntWithAggregatesFilter | number
    country?: StringWithAggregatesFilter | string
    cellphone?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
    default?: BoolWithAggregatesFilter | boolean
    recipient?: BoolWithAggregatesFilter | boolean
  }

  export type OrderItemWhereInput = {
    AND?: Enumerable<OrderItemWhereInput>
    OR?: Enumerable<OrderItemWhereInput>
    NOT?: Enumerable<OrderItemWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    productsId?: IntFilter | number
    amount?: IntFilter | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = {
    id?: number
  }

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    orderId?: IntWithAggregatesFilter | number
    productsId?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: IntFilter | number
    type?: IntFilter | number
    orderItem?: OrderItemListRelationFilter
    productType?: XOR<ProductTypeRelationFilter, productTypeWhereInput> | null
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    orderItem?: OrderItemOrderByRelationAggregateInput
    productType?: productTypeOrderByWithRelationInput
  }

  export type productWhereUniqueInput = {
    id?: number
  }

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    type?: IntWithAggregatesFilter | number
  }

  export type productTypeWhereInput = {
    AND?: Enumerable<productTypeWhereInput>
    OR?: Enumerable<productTypeWhereInput>
    NOT?: Enumerable<productTypeWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    product?: ProductListRelationFilter
  }

  export type productTypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    product?: productOrderByRelationAggregateInput
  }

  export type productTypeWhereUniqueInput = {
    id?: number
  }

  export type productTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: productTypeCountOrderByAggregateInput
    _avg?: productTypeAvgOrderByAggregateInput
    _max?: productTypeMaxOrderByAggregateInput
    _min?: productTypeMinOrderByAggregateInput
    _sum?: productTypeSumOrderByAggregateInput
  }

  export type productTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<productTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
  }

  export type DriverRoutesWhereInput = {
    AND?: Enumerable<DriverRoutesWhereInput>
    OR?: Enumerable<DriverRoutesWhereInput>
    NOT?: Enumerable<DriverRoutesWhereInput>
    id?: IntFilter | number
    driverId?: IntFilter | number
    driver?: XOR<UserRelationFilter, UserWhereInput>
    orders?: OrderListRelationFilter
  }

  export type DriverRoutesOrderByWithRelationInput = {
    id?: SortOrder
    driverId?: SortOrder
    driver?: UserOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type DriverRoutesWhereUniqueInput = {
    id?: number
  }

  export type DriverRoutesOrderByWithAggregationInput = {
    id?: SortOrder
    driverId?: SortOrder
    _count?: DriverRoutesCountOrderByAggregateInput
    _avg?: DriverRoutesAvgOrderByAggregateInput
    _max?: DriverRoutesMaxOrderByAggregateInput
    _min?: DriverRoutesMinOrderByAggregateInput
    _sum?: DriverRoutesSumOrderByAggregateInput
  }

  export type DriverRoutesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DriverRoutesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DriverRoutesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DriverRoutesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    driverId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUpdateManyWithoutDriverInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedUpdateManyWithoutDriverInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type addressCreateInput = {
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
    user: UserCreateNestedOneWithoutAddressesInput
  }

  export type addressUncheckedCreateInput = {
    id?: number
    userId: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type addressUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAddressesInput
  }

  export type addressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type addressCreateManyInput = {
    id?: number
    userId: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type addressUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type addressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderCreateInput = {
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    items?: OrderItemCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoCreateNestedManyWithoutOrderInput
    user: UserCreateNestedOneWithoutOrdersInput
    route?: DriverRoutesCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUpdateManyWithoutOrderInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
    route?: DriverRoutesUpdateOneWithoutOrdersInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: OrderItemUncheckedUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedUpdateManyWithoutOrderInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
  }

  export type OrderUpdateManyMutationInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderAddressDuoCreateInput = {
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
    order: OrderCreateNestedOneWithoutAddressesInput
  }

  export type OrderAddressDuoUncheckedCreateInput = {
    id?: number
    orderId: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderAddressDuoUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
    order?: OrderUpdateOneRequiredWithoutAddressesInput
  }

  export type OrderAddressDuoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderAddressDuoCreateManyInput = {
    id?: number
    orderId: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderAddressDuoUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderAddressDuoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemCreateInput = {
    amount: number
    order: OrderCreateNestedOneWithoutItemsInput
    product: productCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    orderId: number
    productsId: number
    amount: number
  }

  export type OrderItemUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutItemsInput
    product?: productUpdateOneRequiredWithoutOrderItemInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyInput = {
    id?: number
    orderId: number
    productsId: number
    amount: number
  }

  export type OrderItemUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateInput = {
    name: string
    price: number
    orderItem?: OrderItemCreateNestedManyWithoutProductInput
    productType?: productTypeCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    type: number
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    orderItem?: OrderItemUpdateManyWithoutProductInput
    productType?: productTypeUpdateOneWithoutProductInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    orderItem?: OrderItemUncheckedUpdateManyWithoutProductInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    price: number
    type: number
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
  }

  export type productTypeCreateInput = {
    type: string
    product?: productCreateNestedManyWithoutProductTypeInput
  }

  export type productTypeUncheckedCreateInput = {
    id?: number
    type: string
    product?: productUncheckedCreateNestedManyWithoutProductTypeInput
  }

  export type productTypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    product?: productUpdateManyWithoutProductTypeInput
  }

  export type productTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    product?: productUncheckedUpdateManyWithoutProductTypeInput
  }

  export type productTypeCreateManyInput = {
    id?: number
    type: string
  }

  export type productTypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type productTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type DriverRoutesCreateInput = {
    driver: UserCreateNestedOneWithoutPastRoutesInput
    orders?: OrderCreateNestedManyWithoutRouteInput
  }

  export type DriverRoutesUncheckedCreateInput = {
    id?: number
    driverId: number
    orders?: OrderUncheckedCreateNestedManyWithoutRouteInput
  }

  export type DriverRoutesUpdateInput = {
    driver?: UserUpdateOneRequiredWithoutPastRoutesInput
    orders?: OrderUpdateManyWithoutRouteInput
  }

  export type DriverRoutesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    orders?: OrderUncheckedUpdateManyWithoutRouteInput
  }

  export type DriverRoutesCreateManyInput = {
    id?: number
    driverId: number
  }

  export type DriverRoutesUpdateManyMutationInput = {

  }

  export type DriverRoutesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AddressListRelationFilter = {
    every?: addressWhereInput
    some?: addressWhereInput
    none?: addressWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type DriverRoutesListRelationFilter = {
    every?: DriverRoutesWhereInput
    some?: DriverRoutesWhereInput
    none?: DriverRoutesWhereInput
  }

  export type addressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DriverRoutesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    company?: SortOrder
    branchName?: SortOrder
    lastSaleDate?: SortOrder
    lastLogin?: SortOrder
    preferredLanguage?: SortOrder
    licenseId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    licenseId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    company?: SortOrder
    branchName?: SortOrder
    lastSaleDate?: SortOrder
    lastLogin?: SortOrder
    preferredLanguage?: SortOrder
    licenseId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    middleName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    company?: SortOrder
    branchName?: SortOrder
    lastSaleDate?: SortOrder
    lastLogin?: SortOrder
    preferredLanguage?: SortOrder
    licenseId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    licenseId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type addressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type addressAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postalCode?: SortOrder
  }

  export type addressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type addressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type addressSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postalCode?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderAddressDuoListRelationFilter = {
    every?: OrderAddressDuoWhereInput
    some?: OrderAddressDuoWhereInput
    none?: OrderAddressDuoWhereInput
  }

  export type DriverRoutesRelationFilter = {
    is?: DriverRoutesWhereInput | null
    isNot?: DriverRoutesWhereInput | null
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderAddressDuoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timePlaced?: SortOrder
    recieverFirstName?: SortOrder
    recieverLastName?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    paymentType?: SortOrder
    status?: SortOrder
    location?: SortOrder
    routeId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    routeId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timePlaced?: SortOrder
    recieverFirstName?: SortOrder
    recieverLastName?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    paymentType?: SortOrder
    status?: SortOrder
    location?: SortOrder
    routeId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timePlaced?: SortOrder
    recieverFirstName?: SortOrder
    recieverLastName?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    paymentType?: SortOrder
    status?: SortOrder
    location?: SortOrder
    routeId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalItems?: SortOrder
    totalPrice?: SortOrder
    routeId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderAddressDuoCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type OrderAddressDuoAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    postalCode?: SortOrder
  }

  export type OrderAddressDuoMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type OrderAddressDuoMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    cellphone?: SortOrder
    telephone?: SortOrder
    default?: SortOrder
    recipient?: SortOrder
  }

  export type OrderAddressDuoSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    postalCode?: SortOrder
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productsId?: SortOrder
    amount?: SortOrder
  }

  export type ProductTypeRelationFilter = {
    is?: productTypeWhereInput | null
    isNot?: productTypeWhereInput | null
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    type?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    type?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type productTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type productTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type productTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type productTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DriverRoutesCountOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type DriverRoutesAvgOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type DriverRoutesMaxOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type DriverRoutesMinOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type DriverRoutesSumOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
  }

  export type addressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<addressCreateWithoutUserInput>, Enumerable<addressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutUserInput>
    createMany?: addressCreateManyUserInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type DriverRoutesCreateNestedManyWithoutDriverInput = {
    create?: XOR<Enumerable<DriverRoutesCreateWithoutDriverInput>, Enumerable<DriverRoutesUncheckedCreateWithoutDriverInput>>
    connectOrCreate?: Enumerable<DriverRoutesCreateOrConnectWithoutDriverInput>
    createMany?: DriverRoutesCreateManyDriverInputEnvelope
    connect?: Enumerable<DriverRoutesWhereUniqueInput>
  }

  export type addressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<addressCreateWithoutUserInput>, Enumerable<addressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutUserInput>
    createMany?: addressCreateManyUserInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type DriverRoutesUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<Enumerable<DriverRoutesCreateWithoutDriverInput>, Enumerable<DriverRoutesUncheckedCreateWithoutDriverInput>>
    connectOrCreate?: Enumerable<DriverRoutesCreateOrConnectWithoutDriverInput>
    createMany?: DriverRoutesCreateManyDriverInputEnvelope
    connect?: Enumerable<DriverRoutesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type addressUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<addressCreateWithoutUserInput>, Enumerable<addressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<addressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: addressCreateManyUserInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
    set?: Enumerable<addressWhereUniqueInput>
    disconnect?: Enumerable<addressWhereUniqueInput>
    delete?: Enumerable<addressWhereUniqueInput>
    update?: Enumerable<addressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<addressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<addressScalarWhereInput>
  }

  export type OrderUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type DriverRoutesUpdateManyWithoutDriverInput = {
    create?: XOR<Enumerable<DriverRoutesCreateWithoutDriverInput>, Enumerable<DriverRoutesUncheckedCreateWithoutDriverInput>>
    connectOrCreate?: Enumerable<DriverRoutesCreateOrConnectWithoutDriverInput>
    upsert?: Enumerable<DriverRoutesUpsertWithWhereUniqueWithoutDriverInput>
    createMany?: DriverRoutesCreateManyDriverInputEnvelope
    connect?: Enumerable<DriverRoutesWhereUniqueInput>
    set?: Enumerable<DriverRoutesWhereUniqueInput>
    disconnect?: Enumerable<DriverRoutesWhereUniqueInput>
    delete?: Enumerable<DriverRoutesWhereUniqueInput>
    update?: Enumerable<DriverRoutesUpdateWithWhereUniqueWithoutDriverInput>
    updateMany?: Enumerable<DriverRoutesUpdateManyWithWhereWithoutDriverInput>
    deleteMany?: Enumerable<DriverRoutesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type addressUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<addressCreateWithoutUserInput>, Enumerable<addressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<addressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<addressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: addressCreateManyUserInputEnvelope
    connect?: Enumerable<addressWhereUniqueInput>
    set?: Enumerable<addressWhereUniqueInput>
    disconnect?: Enumerable<addressWhereUniqueInput>
    delete?: Enumerable<addressWhereUniqueInput>
    update?: Enumerable<addressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<addressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<addressScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type DriverRoutesUncheckedUpdateManyWithoutDriverInput = {
    create?: XOR<Enumerable<DriverRoutesCreateWithoutDriverInput>, Enumerable<DriverRoutesUncheckedCreateWithoutDriverInput>>
    connectOrCreate?: Enumerable<DriverRoutesCreateOrConnectWithoutDriverInput>
    upsert?: Enumerable<DriverRoutesUpsertWithWhereUniqueWithoutDriverInput>
    createMany?: DriverRoutesCreateManyDriverInputEnvelope
    connect?: Enumerable<DriverRoutesWhereUniqueInput>
    set?: Enumerable<DriverRoutesWhereUniqueInput>
    disconnect?: Enumerable<DriverRoutesWhereUniqueInput>
    delete?: Enumerable<DriverRoutesWhereUniqueInput>
    update?: Enumerable<DriverRoutesUpdateWithWhereUniqueWithoutDriverInput>
    updateMany?: Enumerable<DriverRoutesUpdateManyWithWhereWithoutDriverInput>
    deleteMany?: Enumerable<DriverRoutesScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    upsert?: UserUpsertWithoutAddressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutOrderInput>, Enumerable<OrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type OrderAddressDuoCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderAddressDuoCreateWithoutOrderInput>, Enumerable<OrderAddressDuoUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderAddressDuoCreateOrConnectWithoutOrderInput>
    createMany?: OrderAddressDuoCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderAddressDuoWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type DriverRoutesCreateNestedOneWithoutOrdersInput = {
    create?: XOR<DriverRoutesCreateWithoutOrdersInput, DriverRoutesUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DriverRoutesCreateOrConnectWithoutOrdersInput
    connect?: DriverRoutesWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutOrderInput>, Enumerable<OrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type OrderAddressDuoUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderAddressDuoCreateWithoutOrderInput>, Enumerable<OrderAddressDuoUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderAddressDuoCreateOrConnectWithoutOrderInput>
    createMany?: OrderAddressDuoCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderAddressDuoWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrderItemUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutOrderInput>, Enumerable<OrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type OrderAddressDuoUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderAddressDuoCreateWithoutOrderInput>, Enumerable<OrderAddressDuoUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderAddressDuoCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderAddressDuoUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderAddressDuoCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderAddressDuoWhereUniqueInput>
    set?: Enumerable<OrderAddressDuoWhereUniqueInput>
    disconnect?: Enumerable<OrderAddressDuoWhereUniqueInput>
    delete?: Enumerable<OrderAddressDuoWhereUniqueInput>
    update?: Enumerable<OrderAddressDuoUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderAddressDuoUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderAddressDuoScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type DriverRoutesUpdateOneWithoutOrdersInput = {
    create?: XOR<DriverRoutesCreateWithoutOrdersInput, DriverRoutesUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DriverRoutesCreateOrConnectWithoutOrdersInput
    upsert?: DriverRoutesUpsertWithoutOrdersInput
    connect?: DriverRoutesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<DriverRoutesUpdateWithoutOrdersInput, DriverRoutesUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutOrderInput>, Enumerable<OrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type OrderAddressDuoUncheckedUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderAddressDuoCreateWithoutOrderInput>, Enumerable<OrderAddressDuoUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderAddressDuoCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderAddressDuoUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderAddressDuoCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderAddressDuoWhereUniqueInput>
    set?: Enumerable<OrderAddressDuoWhereUniqueInput>
    disconnect?: Enumerable<OrderAddressDuoWhereUniqueInput>
    delete?: Enumerable<OrderAddressDuoWhereUniqueInput>
    update?: Enumerable<OrderAddressDuoUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderAddressDuoUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderAddressDuoScalarWhereInput>
  }

  export type OrderCreateNestedOneWithoutAddressesInput = {
    create?: XOR<OrderCreateWithoutAddressesInput, OrderUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAddressesInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutAddressesInput = {
    create?: XOR<OrderCreateWithoutAddressesInput, OrderUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAddressesInput
    upsert?: OrderUpsertWithoutAddressesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutAddressesInput, OrderUncheckedUpdateWithoutAddressesInput>
  }

  export type OrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type productCreateNestedOneWithoutOrderItemInput = {
    create?: XOR<productCreateWithoutOrderItemInput, productUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderItemInput
    connect?: productWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutItemsInput = {
    create?: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutItemsInput
    upsert?: OrderUpsertWithoutItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
  }

  export type productUpdateOneRequiredWithoutOrderItemInput = {
    create?: XOR<productCreateWithoutOrderItemInput, productUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderItemInput
    upsert?: productUpsertWithoutOrderItemInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutOrderItemInput, productUncheckedUpdateWithoutOrderItemInput>
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutProductInput>, Enumerable<OrderItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutProductInput>
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type productTypeCreateNestedOneWithoutProductInput = {
    create?: XOR<productTypeCreateWithoutProductInput, productTypeUncheckedCreateWithoutProductInput>
    connectOrCreate?: productTypeCreateOrConnectWithoutProductInput
    connect?: productTypeWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutProductInput>, Enumerable<OrderItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutProductInput>
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type OrderItemUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutProductInput>, Enumerable<OrderItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutProductInput>
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type productTypeUpdateOneWithoutProductInput = {
    create?: XOR<productTypeCreateWithoutProductInput, productTypeUncheckedCreateWithoutProductInput>
    connectOrCreate?: productTypeCreateOrConnectWithoutProductInput
    upsert?: productTypeUpsertWithoutProductInput
    connect?: productTypeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<productTypeUpdateWithoutProductInput, productTypeUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<OrderItemCreateWithoutProductInput>, Enumerable<OrderItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutProductInput>
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type productCreateNestedManyWithoutProductTypeInput = {
    create?: XOR<Enumerable<productCreateWithoutProductTypeInput>, Enumerable<productUncheckedCreateWithoutProductTypeInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutProductTypeInput>
    createMany?: productCreateManyProductTypeInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type productUncheckedCreateNestedManyWithoutProductTypeInput = {
    create?: XOR<Enumerable<productCreateWithoutProductTypeInput>, Enumerable<productUncheckedCreateWithoutProductTypeInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutProductTypeInput>
    createMany?: productCreateManyProductTypeInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type productUpdateManyWithoutProductTypeInput = {
    create?: XOR<Enumerable<productCreateWithoutProductTypeInput>, Enumerable<productUncheckedCreateWithoutProductTypeInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutProductTypeInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutProductTypeInput>
    createMany?: productCreateManyProductTypeInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutProductTypeInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutProductTypeInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type productUncheckedUpdateManyWithoutProductTypeInput = {
    create?: XOR<Enumerable<productCreateWithoutProductTypeInput>, Enumerable<productUncheckedCreateWithoutProductTypeInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutProductTypeInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutProductTypeInput>
    createMany?: productCreateManyProductTypeInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutProductTypeInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutProductTypeInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPastRoutesInput = {
    create?: XOR<UserCreateWithoutPastRoutesInput, UserUncheckedCreateWithoutPastRoutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPastRoutesInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutRouteInput = {
    create?: XOR<Enumerable<OrderCreateWithoutRouteInput>, Enumerable<OrderUncheckedCreateWithoutRouteInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutRouteInput>
    createMany?: OrderCreateManyRouteInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutRouteInput = {
    create?: XOR<Enumerable<OrderCreateWithoutRouteInput>, Enumerable<OrderUncheckedCreateWithoutRouteInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutRouteInput>
    createMany?: OrderCreateManyRouteInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutPastRoutesInput = {
    create?: XOR<UserCreateWithoutPastRoutesInput, UserUncheckedCreateWithoutPastRoutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPastRoutesInput
    upsert?: UserUpsertWithoutPastRoutesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPastRoutesInput, UserUncheckedUpdateWithoutPastRoutesInput>
  }

  export type OrderUpdateManyWithoutRouteInput = {
    create?: XOR<Enumerable<OrderCreateWithoutRouteInput>, Enumerable<OrderUncheckedCreateWithoutRouteInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutRouteInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutRouteInput>
    createMany?: OrderCreateManyRouteInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutRouteInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutRouteInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutRouteInput = {
    create?: XOR<Enumerable<OrderCreateWithoutRouteInput>, Enumerable<OrderUncheckedCreateWithoutRouteInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutRouteInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutRouteInput>
    createMany?: OrderCreateManyRouteInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutRouteInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutRouteInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type addressCreateWithoutUserInput = {
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type addressUncheckedCreateWithoutUserInput = {
    id?: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type addressCreateOrConnectWithoutUserInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutUserInput, addressUncheckedCreateWithoutUserInput>
  }

  export type addressCreateManyUserInputEnvelope = {
    data: Enumerable<addressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    items?: OrderItemCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoCreateNestedManyWithoutOrderInput
    route?: DriverRoutesCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: Enumerable<OrderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DriverRoutesCreateWithoutDriverInput = {
    orders?: OrderCreateNestedManyWithoutRouteInput
  }

  export type DriverRoutesUncheckedCreateWithoutDriverInput = {
    id?: number
    orders?: OrderUncheckedCreateNestedManyWithoutRouteInput
  }

  export type DriverRoutesCreateOrConnectWithoutDriverInput = {
    where: DriverRoutesWhereUniqueInput
    create: XOR<DriverRoutesCreateWithoutDriverInput, DriverRoutesUncheckedCreateWithoutDriverInput>
  }

  export type DriverRoutesCreateManyDriverInputEnvelope = {
    data: Enumerable<DriverRoutesCreateManyDriverInput>
    skipDuplicates?: boolean
  }

  export type addressUpsertWithWhereUniqueWithoutUserInput = {
    where: addressWhereUniqueInput
    update: XOR<addressUpdateWithoutUserInput, addressUncheckedUpdateWithoutUserInput>
    create: XOR<addressCreateWithoutUserInput, addressUncheckedCreateWithoutUserInput>
  }

  export type addressUpdateWithWhereUniqueWithoutUserInput = {
    where: addressWhereUniqueInput
    data: XOR<addressUpdateWithoutUserInput, addressUncheckedUpdateWithoutUserInput>
  }

  export type addressUpdateManyWithWhereWithoutUserInput = {
    where: addressScalarWhereInput
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyWithoutAddressesInput>
  }

  export type addressScalarWhereInput = {
    AND?: Enumerable<addressScalarWhereInput>
    OR?: Enumerable<addressScalarWhereInput>
    NOT?: Enumerable<addressScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    address?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    postalCode?: IntFilter | number
    country?: StringFilter | string
    cellphone?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    default?: BoolFilter | boolean
    recipient?: BoolFilter | boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    timePlaced?: DateTimeFilter | Date | string
    recieverFirstName?: StringFilter | string
    recieverLastName?: StringFilter | string
    totalItems?: IntFilter | number
    totalPrice?: IntFilter | number
    paymentType?: StringFilter | string
    status?: StringFilter | string
    location?: StringFilter | string
    routeId?: IntNullableFilter | number | null
  }

  export type DriverRoutesUpsertWithWhereUniqueWithoutDriverInput = {
    where: DriverRoutesWhereUniqueInput
    update: XOR<DriverRoutesUpdateWithoutDriverInput, DriverRoutesUncheckedUpdateWithoutDriverInput>
    create: XOR<DriverRoutesCreateWithoutDriverInput, DriverRoutesUncheckedCreateWithoutDriverInput>
  }

  export type DriverRoutesUpdateWithWhereUniqueWithoutDriverInput = {
    where: DriverRoutesWhereUniqueInput
    data: XOR<DriverRoutesUpdateWithoutDriverInput, DriverRoutesUncheckedUpdateWithoutDriverInput>
  }

  export type DriverRoutesUpdateManyWithWhereWithoutDriverInput = {
    where: DriverRoutesScalarWhereInput
    data: XOR<DriverRoutesUpdateManyMutationInput, DriverRoutesUncheckedUpdateManyWithoutPastRoutesInput>
  }

  export type DriverRoutesScalarWhereInput = {
    AND?: Enumerable<DriverRoutesScalarWhereInput>
    OR?: Enumerable<DriverRoutesScalarWhereInput>
    NOT?: Enumerable<DriverRoutesScalarWhereInput>
    id?: IntFilter | number
    driverId?: IntFilter | number
  }

  export type UserCreateWithoutAddressesInput = {
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    orders?: OrderCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutAddressesInput = {
    id?: number
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpsertWithoutAddressesInput = {
    update: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpdateWithoutAddressesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: OrderUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUpdateManyWithoutDriverInput
  }

  export type UserUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedUpdateManyWithoutDriverInput
  }

  export type OrderItemCreateWithoutOrderInput = {
    amount: number
    product: productCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    productsId: number
    amount: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: Enumerable<OrderItemCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type OrderAddressDuoCreateWithoutOrderInput = {
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderAddressDuoUncheckedCreateWithoutOrderInput = {
    id?: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderAddressDuoCreateOrConnectWithoutOrderInput = {
    where: OrderAddressDuoWhereUniqueInput
    create: XOR<OrderAddressDuoCreateWithoutOrderInput, OrderAddressDuoUncheckedCreateWithoutOrderInput>
  }

  export type OrderAddressDuoCreateManyOrderInputEnvelope = {
    data: Enumerable<OrderAddressDuoCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOrdersInput = {
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesCreateNestedManyWithoutDriverInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressUncheckedCreateNestedManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedCreateNestedManyWithoutDriverInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type DriverRoutesCreateWithoutOrdersInput = {
    driver: UserCreateNestedOneWithoutPastRoutesInput
  }

  export type DriverRoutesUncheckedCreateWithoutOrdersInput = {
    id?: number
    driverId: number
  }

  export type DriverRoutesCreateOrConnectWithoutOrdersInput = {
    where: DriverRoutesWhereUniqueInput
    create: XOR<DriverRoutesCreateWithoutOrdersInput, DriverRoutesUncheckedCreateWithoutOrdersInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutItemsInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: Enumerable<OrderItemScalarWhereInput>
    OR?: Enumerable<OrderItemScalarWhereInput>
    NOT?: Enumerable<OrderItemScalarWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    productsId?: IntFilter | number
    amount?: IntFilter | number
  }

  export type OrderAddressDuoUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderAddressDuoWhereUniqueInput
    update: XOR<OrderAddressDuoUpdateWithoutOrderInput, OrderAddressDuoUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderAddressDuoCreateWithoutOrderInput, OrderAddressDuoUncheckedCreateWithoutOrderInput>
  }

  export type OrderAddressDuoUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderAddressDuoWhereUniqueInput
    data: XOR<OrderAddressDuoUpdateWithoutOrderInput, OrderAddressDuoUncheckedUpdateWithoutOrderInput>
  }

  export type OrderAddressDuoUpdateManyWithWhereWithoutOrderInput = {
    where: OrderAddressDuoScalarWhereInput
    data: XOR<OrderAddressDuoUpdateManyMutationInput, OrderAddressDuoUncheckedUpdateManyWithoutAddressesInput>
  }

  export type OrderAddressDuoScalarWhereInput = {
    AND?: Enumerable<OrderAddressDuoScalarWhereInput>
    OR?: Enumerable<OrderAddressDuoScalarWhereInput>
    NOT?: Enumerable<OrderAddressDuoScalarWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    address?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    postalCode?: IntFilter | number
    country?: StringFilter | string
    cellphone?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    default?: BoolFilter | boolean
    recipient?: BoolFilter | boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUpdateManyWithoutDriverInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUncheckedUpdateManyWithoutUserInput
    pastRoutes?: DriverRoutesUncheckedUpdateManyWithoutDriverInput
  }

  export type DriverRoutesUpsertWithoutOrdersInput = {
    update: XOR<DriverRoutesUpdateWithoutOrdersInput, DriverRoutesUncheckedUpdateWithoutOrdersInput>
    create: XOR<DriverRoutesCreateWithoutOrdersInput, DriverRoutesUncheckedCreateWithoutOrdersInput>
  }

  export type DriverRoutesUpdateWithoutOrdersInput = {
    driver?: UserUpdateOneRequiredWithoutPastRoutesInput
  }

  export type DriverRoutesUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateWithoutAddressesInput = {
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    items?: OrderItemCreateNestedManyWithoutOrderInput
    user: UserCreateNestedOneWithoutOrdersInput
    route?: DriverRoutesCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutAddressesInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutAddressesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAddressesInput, OrderUncheckedCreateWithoutAddressesInput>
  }

  export type OrderUpsertWithoutAddressesInput = {
    update: XOR<OrderUpdateWithoutAddressesInput, OrderUncheckedUpdateWithoutAddressesInput>
    create: XOR<OrderCreateWithoutAddressesInput, OrderUncheckedCreateWithoutAddressesInput>
  }

  export type OrderUpdateWithoutAddressesInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUpdateManyWithoutOrderInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
    route?: DriverRoutesUpdateOneWithoutOrdersInput
  }

  export type OrderUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: OrderItemUncheckedUpdateManyWithoutOrderInput
  }

  export type OrderCreateWithoutItemsInput = {
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    addresses?: OrderAddressDuoCreateNestedManyWithoutOrderInput
    user: UserCreateNestedOneWithoutOrdersInput
    route?: DriverRoutesCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutItemsInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
    addresses?: OrderAddressDuoUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type productCreateWithoutOrderItemInput = {
    name: string
    price: number
    productType?: productTypeCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrderItemInput = {
    id?: number
    name: string
    price: number
    type: number
  }

  export type productCreateOrConnectWithoutOrderItemInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrderItemInput, productUncheckedCreateWithoutOrderItemInput>
  }

  export type OrderUpsertWithoutItemsInput = {
    update: XOR<OrderUpdateWithoutItemsInput, OrderUncheckedUpdateWithoutItemsInput>
    create: XOR<OrderCreateWithoutItemsInput, OrderUncheckedCreateWithoutItemsInput>
  }

  export type OrderUpdateWithoutItemsInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    addresses?: OrderAddressDuoUpdateManyWithoutOrderInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
    route?: DriverRoutesUpdateOneWithoutOrdersInput
  }

  export type OrderUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: OrderAddressDuoUncheckedUpdateManyWithoutOrderInput
  }

  export type productUpsertWithoutOrderItemInput = {
    update: XOR<productUpdateWithoutOrderItemInput, productUncheckedUpdateWithoutOrderItemInput>
    create: XOR<productCreateWithoutOrderItemInput, productUncheckedCreateWithoutOrderItemInput>
  }

  export type productUpdateWithoutOrderItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    productType?: productTypeUpdateOneWithoutProductInput
  }

  export type productUncheckedUpdateWithoutOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateWithoutProductInput = {
    amount: number
    order: OrderCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: number
    orderId: number
    amount: number
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: Enumerable<OrderItemCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type productTypeCreateWithoutProductInput = {
    type: string
  }

  export type productTypeUncheckedCreateWithoutProductInput = {
    id?: number
    type: string
  }

  export type productTypeCreateOrConnectWithoutProductInput = {
    where: productTypeWhereUniqueInput
    create: XOR<productTypeCreateWithoutProductInput, productTypeUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderItemInput>
  }

  export type productTypeUpsertWithoutProductInput = {
    update: XOR<productTypeUpdateWithoutProductInput, productTypeUncheckedUpdateWithoutProductInput>
    create: XOR<productTypeCreateWithoutProductInput, productTypeUncheckedCreateWithoutProductInput>
  }

  export type productTypeUpdateWithoutProductInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type productTypeUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type productCreateWithoutProductTypeInput = {
    name: string
    price: number
    orderItem?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutProductTypeInput = {
    id?: number
    name: string
    price: number
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutProductTypeInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutProductTypeInput, productUncheckedCreateWithoutProductTypeInput>
  }

  export type productCreateManyProductTypeInputEnvelope = {
    data: Enumerable<productCreateManyProductTypeInput>
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutProductTypeInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutProductTypeInput, productUncheckedUpdateWithoutProductTypeInput>
    create: XOR<productCreateWithoutProductTypeInput, productUncheckedCreateWithoutProductTypeInput>
  }

  export type productUpdateWithWhereUniqueWithoutProductTypeInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutProductTypeInput, productUncheckedUpdateWithoutProductTypeInput>
  }

  export type productUpdateManyWithWhereWithoutProductTypeInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type productScalarWhereInput = {
    AND?: Enumerable<productScalarWhereInput>
    OR?: Enumerable<productScalarWhereInput>
    NOT?: Enumerable<productScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: IntFilter | number
    type?: IntFilter | number
  }

  export type UserCreateWithoutPastRoutesInput = {
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPastRoutesInput = {
    id?: number
    firstName: string
    lastName: string
    middleName?: string | null
    password: string
    email: string
    role: string
    company?: string | null
    branchName?: string | null
    lastSaleDate?: Date | string | null
    lastLogin?: Date | string | null
    preferredLanguage?: string
    licenseId?: number | null
    addresses?: addressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPastRoutesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPastRoutesInput, UserUncheckedCreateWithoutPastRoutesInput>
  }

  export type OrderCreateWithoutRouteInput = {
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    items?: OrderItemCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoCreateNestedManyWithoutOrderInput
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutRouteInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutRouteInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutRouteInput, OrderUncheckedCreateWithoutRouteInput>
  }

  export type OrderCreateManyRouteInputEnvelope = {
    data: Enumerable<OrderCreateManyRouteInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPastRoutesInput = {
    update: XOR<UserUpdateWithoutPastRoutesInput, UserUncheckedUpdateWithoutPastRoutesInput>
    create: XOR<UserCreateWithoutPastRoutesInput, UserUncheckedCreateWithoutPastRoutesInput>
  }

  export type UserUpdateWithoutPastRoutesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPastRoutesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    lastSaleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableIntFieldUpdateOperationsInput | number | null
    addresses?: addressUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
  }

  export type OrderUpsertWithWhereUniqueWithoutRouteInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutRouteInput, OrderUncheckedUpdateWithoutRouteInput>
    create: XOR<OrderCreateWithoutRouteInput, OrderUncheckedCreateWithoutRouteInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutRouteInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutRouteInput, OrderUncheckedUpdateWithoutRouteInput>
  }

  export type OrderUpdateManyWithWhereWithoutRouteInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type addressCreateManyUserInput = {
    id?: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderCreateManyUserInput = {
    id?: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
    routeId?: number | null
  }

  export type DriverRoutesCreateManyDriverInput = {
    id?: number
  }

  export type addressUpdateWithoutUserInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type addressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type addressUncheckedUpdateManyWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderUpdateWithoutUserInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUpdateManyWithoutOrderInput
    route?: DriverRoutesUpdateOneWithoutOrdersInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: OrderItemUncheckedUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedUpdateManyWithoutOrderInput
  }

  export type OrderUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    routeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DriverRoutesUpdateWithoutDriverInput = {
    orders?: OrderUpdateManyWithoutRouteInput
  }

  export type DriverRoutesUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    orders?: OrderUncheckedUpdateManyWithoutRouteInput
  }

  export type DriverRoutesUncheckedUpdateManyWithoutPastRoutesInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    productsId: number
    amount: number
  }

  export type OrderAddressDuoCreateManyOrderInput = {
    id?: number
    address: string
    address2?: string | null
    address3?: string | null
    city: string
    state: string
    postalCode: number
    country: string
    cellphone?: string | null
    telephone?: string | null
    default?: boolean
    recipient?: boolean
  }

  export type OrderItemUpdateWithoutOrderInput = {
    amount?: IntFieldUpdateOperationsInput | number
    product?: productUpdateOneRequiredWithoutOrderItemInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderAddressDuoUpdateWithoutOrderInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderAddressDuoUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderAddressDuoUncheckedUpdateManyWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    default?: BoolFieldUpdateOperationsInput | boolean
    recipient?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemCreateManyProductInput = {
    id?: number
    orderId: number
    amount: number
  }

  export type OrderItemUpdateWithoutProductInput = {
    amount?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutItemsInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateManyProductTypeInput = {
    id?: number
    name: string
    price: number
  }

  export type productUpdateWithoutProductTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    orderItem?: OrderItemUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateWithoutProductTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    orderItem?: OrderItemUncheckedUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateManyRouteInput = {
    id?: number
    userId: number
    timePlaced?: Date | string
    recieverFirstName: string
    recieverLastName: string
    totalItems: number
    totalPrice: number
    paymentType: string
    status?: string
    location?: string
  }

  export type OrderUpdateWithoutRouteInput = {
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUpdateManyWithoutOrderInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
  }

  export type OrderUncheckedUpdateWithoutRouteInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timePlaced?: DateTimeFieldUpdateOperationsInput | Date | string
    recieverFirstName?: StringFieldUpdateOperationsInput | string
    recieverLastName?: StringFieldUpdateOperationsInput | string
    totalItems?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderInput
    addresses?: OrderAddressDuoUncheckedUpdateManyWithoutOrderInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}